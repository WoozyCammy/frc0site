[
{
	"uri": "https://frczero.org/competition/",
	"title": "1.0 Competition",
	"tags": [],
	"description": "",
	"content": "1.0 Competition Competition is what brings every team together. The time when all the hard work pays off. The time when you get to show off your robot and your team. The time when you get to compete against other teams. The time when you get to have fun. The time when you get to win. The time when you get to lose. The time when you get to learn. The time when you get to grow. The time when you get to make friends. The time when you get to make memories. The time when you get to be a part of something bigger than yourself. The time when you get to be a part of FIRST Robotics Competition.\nF.I.R.S.T. is always, and will always be about more than the wins, losses and points on the field. It is about the people. It is about the students, mentors, parents, volunteers, and sponsors. It is about the teams. It is about the community. FRC and the other programs offered by F.I.R.S.T. have fostered the community behind this site. The experiences we have had at competitions have shaped us into the people we are today. We have made friends, learned lessons, and grown as people. We have made memories that will last a lifetime. We have been a part of something bigger than ourselves. We have been a part of a FIRST Robotics Competition.\nBelow is an outline of the topics that will be covered in this chapter.\nContents for this Chapter Order Page Title Time Estimate 1. What is a FRC Competition? 5 minutes 2. Competition Events 10 minutes 3. Competition Rules 10 minutes 4. Competition Scoring 10 minutes 5. Parent\u0026rsquo;s Guide to Competition 5 minutes 6. Mentor\u0026rsquo;s Guide to Competition 5 minutes 7. Competition Resources 5 minutes 8. Competition Videos 5 minutes Total Estimated Time 50 minutes "
},
{
	"uri": "https://frczero.org/engineering_design/",
	"title": "2.0 Engineering Design",
	"tags": [],
	"description": "",
	"content": "2.0 Engineering Design Engineering design is the process of designing a product or system to meet a specific set of requirements. The design process is a series of steps that engineers follow to design a product. The number of steps varies depending on who you ask, but the main point is that its a cycle. The design process is a cycle because it is not a linear process. Engineers will go back and forth between the steps as they work on the design. The design process is also iterative. This means that the design will be improved over time.\nAn example diagram of the design process is shown above.\nBelow is an outline of the topics that will be covered in this chapter.\nContents for this Chapter Order Page Title Time Estimate 2.1 Design Process 30 minutes 2.2 Design Brief 30 minutes 2.3 Design Constraints 30 minutes 2.4 Design Specifications 30 minutes 2.5 Design Requirements 30 minutes 2.6 Design Sketches 30 minutes 2.7 Design Models 30 minutes 2.8 Design Testing 30 minutes 2.9 Design Review 30 minutes 2.10 Design Iteration 30 minutes 2.11 Design Documentation 30 minutes 2.12 Design Presentation 30 minutes Total 6 hours "
},
{
	"uri": "https://frczero.org/machining_fab/",
	"title": "3.0 Machining &amp; Fabrication",
	"tags": [],
	"description": "",
	"content": "3.0 Machining \u0026amp; Fabrication There are many levels and types of machining and fabrication. The most common types of machining are turning and milling. Turning is the process of cutting a cylindrical shape into a piece of material. Milling is the process of cutting a flat shape into a piece of material. The most common types of fabrication are welding and 3D printing. Welding is the process of joining two pieces of metal together. 3D printing is the process of building a 3D object from a digital model. Teams without equipment like this can still benefit from the lessons in this chapter. Teams can learn how to make parts using other methods like hand tools and simple machines. Teams will also get advice on how to find new tools, access to mentors/shops, and how to use the tools they have. The lessons about machining and fabrication apply to all levels of teams. Teams can learn how to use the tools they have to make the best parts they can.\nBelow is an outline of the topics that will be covered in this chapter.\nContents for this Chapter Order Page Title Time Estimate 3.1 Machining \u0026amp; Fabrication 30 minutes 3.2 Machining \u0026amp; Fabrication Tools 30 minutes 3.3 Machining \u0026amp; Fabrication Safety 30 minutes 3.4 Machining \u0026amp; Fabrication Materials 30 minutes 3.5 Machining \u0026amp; Fabrication Design 30 minutes 3.6 Machining \u0026amp; Fabrication Tolerances 30 minutes 3.7 Machining \u0026amp; Fabrication CAD 30 minutes 3.8 Machining \u0026amp; Fabrication CAM 30 minutes 3.9 Machining \u0026amp; Fabrication CNC 30 minutes 3.10 Machining \u0026amp; Fabrication 3D Printing 30 minutes 3.11 Machining \u0026amp; Fabrication Laser Cutting 30 minutes 3.12 Machining \u0026amp; Fabrication Bridgeport Mill 30 minutes 3.13 Machining \u0026amp; Fabrication Lathe 30 minutes 3.14 Machining \u0026amp; Fabrication Welding 30 minutes 3.15 Machining \u0026amp; Fabrication Hand Tools 30 minutes 3.16 Machining \u0026amp; Fabrication Simple Machines 30 minutes 3.17 Machining \u0026amp; Fabrication Shop Access 30 minutes 3.18 Machining \u0026amp; Fabrication Shop Safety 30 minutes Total 9 hours "
},
{
	"uri": "https://frczero.org/electronics/electronics-troubleshooting/",
	"title": "4.9 Electronics Troubleshooting",
	"tags": [],
	"description": "",
	"content": "What is Electronics Troubleshooting? Electronics troubleshooting is the process of finding and fixing problems with electronic circuits. This process is very similar to troubleshooting mechanical problems. You will need to use the same steps to find and fix problems with electronics. The only difference is that you will be using electronic tools and equipment to find and fix the problems. Motors and other sensors are also considered electronics. This means that you will also need to troubleshoot these components.\nBelow is an outline of the topics that will be covered in this section.\nContents for this Section Order Page Title Time Estimate 4.9.1 Electronics Troubleshooting Process 10 minutes 4.9.2 Electronics Troubleshooting Tools 10 minutes 4.9.3 Electronics Troubleshooting Techniques 10 minutes 4.9.4 Falcon 500 Fixes 20 minutes 4.9.5 Talon SRX Fixes 20 minutes 4.9.6 Pigeon IMU Fixes 20 minutes 4.9.7 Spark Max Fixes 20 minutes 4.9.8 Spark Max Encoder Fixes 20 minutes 4.9.9 Radio and Network Fixes 20 minutes 4.9.10 CAN Bus Fixes 20 minutes 4.9.11 Power Distribution Fixes 20 minutes 4.9.12 Roborio Fixes 20 minutes 4.9.13 PWM Motor Controller Fixes 20 minutes 4.9.14 PCM Fixes 20 minutes 4.9.15 Limelight Fixes 20 minutes 4.9.16 Camera Fixes 20 minutes Next Steps After you have learned about electronics troubleshooting, you are ready to learn about electronics resources. Click the link below to learn more about electronics resources.\n4.10 Electronics Resources\n"
},
{
	"uri": "https://frczero.org/electronics/",
	"title": "4.0 Electronics",
	"tags": [],
	"description": "",
	"content": "4.0 Electronics Electronics is the backbone of the robot. Without electronics, the robot would not be able to move, sense, or communicate. Electronics is the most complex part of the robot. Students will learn how to design, document, assemble, and test electronic circuits. Students will also learn how to use the tools and equipment needed to build these circuits. There are many different types of electronics that can be used on a robot. Some of these include:\nMotors Sensors Relays Switches Lights Cameras Microcontrollers Power Distribution HMIs (Human Machine Interfaces) Communication Hardware Below is an outline of the topics that will be covered in this chapter.\nContents for this Chapter Order Page Title Time Estimate 1. What is Electronics? 5 minutes 2. Electronics Tools 10 minutes 3. Electronics Components 10 minutes 4. Electronics Circuits 10 minutes 5. Electronics Safety 10 minutes 6. Electronics Assembly 10 minutes 7. Electronics Testing 10 minutes 8. Electronics Documentation 10 minutes 9. Electronics Troubleshooting 10 minutes 10. Electronics Resources 10 minutes 11. Electronics Glossary 10 minutes Total Estimated Time 110 minutes "
},
{
	"uri": "https://frczero.org/pneumatics/",
	"title": "5.0 Pneumatics",
	"tags": [],
	"description": "",
	"content": "5.0 Pneumatics What are Pneumatics? In the context of FRC pneumatics refers to the use of compressed air to power mechanisms. This can be used to extend or retract a piston, or to move a piston in a linear direction. Pneumatic systems can be confusing to newcomers. This chapter will cover the basics of pneumatics and how to use them in FRC.\nContents for this Chapter Order Page Title Time Estimate 1. What are Pneumatics? 5 minutes 2. What are Pneumatic Components? 10 minutes 3. Pneumatic Safety 5 minutes 4. How to Setup a Pneumatic System 20 minutes 5. Pneumatic Control 20 minutes 6. Pneumatic Troubleshooting 10 minutes 7. Pneumatic Resources 5 minutes Total Estimated Time 75 minutes "
},
{
	"uri": "https://frczero.org/programming/",
	"title": "6.0 Programming",
	"tags": [],
	"description": "",
	"content": "6.0 Programming In FRC there are 4 main programming languages that are used. These are Java, C++, LabVIEW, and Python. Each language has its own advantages and disadvantages. The language that you choose to use will depend on your team\u0026rsquo;s preferences and the programming language that your mentors are most comfortable with. The programming language that you choose to use will also depend on the programming language that your team\u0026rsquo;s robot controller is programmed in. The robot controller is the computer that controls the robot. The robot controller is a NI RoboRio. The Roborio can be configured for any of the languages listed above.\nRobot code is also not the only type of programming done in FRC. Teams write GUI software for their drive stations, they make games in Unity and Unreal Engine, and they write code for their websites. Students also learn how to write low level firmware for devices like arduinos and raspberry pis. Programming is a very important part of FRC and students can come into FRC with little to no programming experience and leave with a very strong understanding of programming. The guides here are intended to help in that process and also expose students to the different types of programming that are done in FRC.\nBelow is an outline of the topics that will be covered in this chapter.\nContents for this Chapter Order Page Title Time Estimate 6.1 Programming Languages 30 minutes 6.2 Java 30 minutes 6.3 C++ 30 minutes 6.4 LabVIEW 30 minutes 6.5 Python 30 minutes 6.6 Robot Code 30 minutes 6.7 Timed Robot 30 minutes 6.8 Command Based Programming 30 minutes 6.9 RobotBuilder 30 minutes 6.10 Path Planning 30 minutes 6.11 Robot Simulation 30 minutes 6.12 Vision Processing 30 minutes 6.13 ROS 30 minutes 6.14 GUI Programming 30 minutes 6.15 Unity 30 minutes 6.16 Unreal Engine 30 minutes 6.17 Web Development 30 minutes 6.18 Arduino 30 minutes 6.19 Raspberry Pi 30 minutes "
},
{
	"uri": "https://frczero.org/programming/programming_languages/",
	"title": "6.1 Programming Languages",
	"tags": [],
	"description": "",
	"content": "What is programming? Programming is the process of designing, writing, testing, debugging, and maintaining the source code of computer programs. It is a set of instructions that tell a computer what to do and how to do it.\nProgramming languages are the languages used to write the source code of programs. There are many programming languages, each with its own syntax, structure, and rules. The four most popular programming languages used in FRC include Python, Java, C++, and LabVIEW.\nWhy do programming languages exist? Programming languages exist to provide a way for humans to communicate instructions to computers in a manner that they can understand and execute.\nComputers are essentially machines that perform operations based on a set of instructions. However, computers do not understand natural language like humans do, so programming languages provide a way for us to write code in a structured, formal syntax that the computer can interpret and execute.\nProgramming languages have evolved over time to become more user-friendly, easier to read, and capable of abstracting complex concepts into simple, high-level constructs. This makes it easier for humans to write and understand code, and allows for the creation of more complex programs.\nAdditionally, programming languages serve as a means of communication between developers, enabling them to share, reuse, and build upon each other\u0026rsquo;s code.\nIn summary, programming languages exist to provide a bridge between human language and the language of computers, enabling us to create software that can perform a wide range of tasks and solve complex problems.\nWhat is robotics programming? Robotics programming involves writing code that controls the behavior and actions of robots. This code can control how a robot moves, interacts with its environment, and processes information from sensors.\nThe basics of robotics programming usually start with understanding how to control the movement of a robot\u0026rsquo;s motors, how to gather and interpret data from sensors, and how to make decisions based on that data. This requires an understanding of the underlying hardware and how to communicate with it using code.\nOnce you have a basic understanding of these concepts, you can start writing code to control a robot\u0026rsquo;s movements, such as making it move forward, turn, and avoid obstacles. You can also write code that enables the robot to make decisions based on the data it gathers from its sensors, such as determining the distance to an object and avoiding collisions.\nOverall, robotics programming is an exciting and challenging field that combines both software and hardware skills. With time and practice, you can develop your skills and create more sophisticated robots that can perform complex tasks.\nThe next few chapters will guide you through the aspects of each programming language listed below this includes:\nSyntax: The set of rules and constructs that define how code is written in a particular programming language. This includes things like variable declaration, function definition, and control structures. Structure: The organization and arrangement of code, including the way in which code is indented, the use of white space, and the arrangement of functions, variables, and other constructs. Data Types: The different types of data that a programming language can handle, such as integers, floating-point numbers, strings, and arrays. Input/Output: The mechanism for reading data from or writing data to the user or other external sources. Control Structures: Constructs that control the flow of execution of the program, such as loops, if-then-else statements, and switch statements. Error handling: The process of detecting and resolving errors in the program, such as exceptions, runtime errors, and debugging. Object-Oriented Programming (OOP) concepts: A programming paradigm that organizes code into objects, each of which represents a real-world entity and encapsulates its data and behavior. (This will be touched on in 6.2: Java ) Next: Order Page Title Time Estimate 6.2 Java 30 minutes 6.3 C++ 30 minutes 6.4 LabVIEW 30 minutes 6.5 Python 30 minutes -\u0026gt; Back to index/programming\n"
},
{
	"uri": "https://frczero.org/programming/cpp/",
	"title": "6.3 C++",
	"tags": [],
	"description": "",
	"content": "What is C++ (C plus plus) C++ is a general-purpose programming language created by Bjarne Stroustrup as an extension of the C programming language, or \u0026ldquo;C with Classes\u0026rdquo;. The language has expanded significantly over time, and modern C++ now has object-oriented, generic, and functional features in addition to facilities for low-level memory manipulation.\nIn simple terms, C++ is a programming languages that is used for a wide variety of purposes. It is used to create operating systems, games, browsers, and so much more. It is a very powerful language that is used by many programmers. In FRC, C++ can be used to program the robot, and it is one that other teams will be likely to help debug at your events. It is different from Java, python and LabView and each has its own advantages and disadvantages. We try to use FRC or robotics concepts as much as possible in the following lessons, but we also try to keep the examples as general as possible so that you can apply them to other projects so I will use FRC algorithms and examples but not use actual libraries or structure for TimedRobot, CommandBased or other types. Those are covered in other areas of the site.\nBelow is a table outlining the topics you will learn about in this section specifically for C++.\nC++ Topics Order Page Title Time Estimate 6.3.1 Syntax 30 minutes 6.3.2 Structure 30 minutes 6.3.3 Data Types 30 minutes 6.3.4 Input/Output 30 minutes 6.3.5 Control Structures 30 minutes 6.3.6 Error Handling 30 minutes 6.3.7 OOP for CPP 30 minutes -\u0026gt; Back to 6.0 Programming\n"
},
{
	"uri": "https://frczero.org/cad/",
	"title": "7.0 Computer Aided Design",
	"tags": [],
	"description": "",
	"content": "7.0 Computer Aided Design CAD or Computer Aided Design helps teams design their robot. It is a great way to visualize the robot and to make sure that the robot is designed correctly. CAD is also a great way to share the robot design with other teams and mentors. CAD is not required for the competition, but it is highly recommended. Software like Fusion 360, OnShape, and SolidWorks are all great options for teams to use. All 3 have free versions (For Educational use) that are great for teams to use. My personal favorite is Fusion 360 (Mr. Siefen\u0026rsquo;s opinion). All of them have great tutorials and resources to help teams get started. The goal of this chapter is to help teams get started with CAD and to help teams learn how to use CAD to design FRC specific items and hardware.\nBelow is an outline of the topics that will be covered in this chapter.\nContents for this Chapter Order Page Title Time Estimate 7.1 Fusion 360 30 minutes 7.2 OnShape 30 minutes 7.3 SolidWorks 30 minutes 7.4 CAD Basics 30 minutes 7.5 CAD for FRC 30 minutes 7.6 CAD for FRC - Drivetrain 30 minutes 7.7 CAD for FRC - Intake 30 minutes 7.8 CAD for FRC - Shooter 30 minutes 7.9 CAD for FRC - Climber 30 minutes 7.10 CAD for FRC - Control Panel 30 minutes 7.11 CAD for FRC - Electrical 30 minutes 7.12 CAD for FRC - Pneumatics 30 minutes 7.13 CAD for FRC - 3d Printing 30 minutes 7.14 CAD for FRC - CNC 30 minutes 7.15 CAD for FRC - Sheet Metal 30 minutes 7.16 CAD for FRC - Wood 30 minutes Appendix A - CAD Resources 30 minutes Total 8 hours "
},
{
	"uri": "https://frczero.org/business_marketing/",
	"title": "8.0 Business &amp; Marketing",
	"tags": [],
	"description": "",
	"content": "8.0 Business \u0026amp; Marketing Teams can benefit from a strong business plan and attract sponsors by having a strong marketing plan. There are simple, free ways to get started with both. While the business and marketing plans are not required for the competition, they are highly recommended. The Team Sustainability Award is given to teams that can show how they are growing their team and sustaining their team for the long term.\nBelow is an outline of the topics that will be covered in this chapter.\nContents for this Chapter Order Page Title Time Estimate 8.1 Business Plan 30 minutes 8.2 Marketing Plan 30 minutes 8.3 Team Sustainability 30 minutes 8.4 Sponsorship 30 minutes 8.5 Social Media Management 30 minutes 8.6 Team Website 30 minutes 8.7 Team Branding 30 minutes 8.8 Team Logo 30 minutes 8.9 Team T-Shirt 30 minutes 8.10 Team Video 30 minutes 8.11 Team Photos 30 minutes "
},
{
	"uri": "https://frczero.org/business_marketing/team_website/",
	"title": "8.7 Team Website",
	"tags": [],
	"description": "",
	"content": "Why should FRC teams have a website? There are numerous benefits teams can gain from having a website. A website can be used to:\nPromote the team to the community Promote the team to potential sponsors Promote the team to potential mentors Promote the team to potential students Share information with team members Organize team information in a central location Share team information with the public Practice web development skills Practice graphic design skills Practice writing skills Learn about web hosting Learn about web design What should a team website include? A table below lists some of the most common features of a team website. The table also includes a brief description of each feature:\nFeature Description Home Page The home page is the first page a visitor sees when they visit the website. The home page should include a brief description of the team, a list of the team\u0026rsquo;s sponsors, and a list of the team\u0026rsquo;s mentors. About Page The about page should include a brief description of the team, a list of the team\u0026rsquo;s sponsors, and a list of the team\u0026rsquo;s mentors. Sponsors Page The sponsors page should include a list of the team\u0026rsquo;s sponsors. Team Members Page (optional) The team members page should have information meant for team members and ideally could be password protected. Contact Page The contact page should include a form for visitors to contact the team. Calendar Page The calendar page should include a calendar of team events. Media Page The media page should include links to team videos and photos. Social Media Links The website should include links to the team\u0026rsquo;s social media accounts. How can a team create a website? There are many ways to create a website. The table below lists some of the most common ways to create a website:\nMethod Description Use a website builder Website builders are tools that allow users to create websites without writing any code. Website builders are often free and easy to use. Use an SSG like Hugo SSGs are tools that allow users to create websites by writing text files. SSGs are often free and easy to use. Use a CMS like WordPress CMSs are tools that allow users to create websites by writing text files. CMSs are often free and easy to use. Use a web development framework like Django Web development frameworks are tools that allow users to create websites by writing code. Web development frameworks are often free and easy to use. Do it from scratch Creating a website from scratch requires a lot of knowledge about web development. How can a team host a website? There are many ways to host a website. The table below lists some of the most common ways to host a website and the associated costs:\nMethod Description Cost Use a free hosting service Free hosting services are services that allow users to host websites for free. Free hosting services are often limited in features and functionality. Free Use a paid hosting service Paid hosting services are services that allow users to host websites for a fee. Paid hosting services are often more feature rich than free hosting services. $5 - $20 per month Host the website on a team member\u0026rsquo;s computer Hosting the website on a team member\u0026rsquo;s computer is a free way to host a website. Hosting the website on a team member\u0026rsquo;s computer is often limited in features and functionality. Free Use services like Read the Docs Services like Read the Docs are services that allow users to host websites for free. Services like Read the Docs are often limited in features and functionality. Free How can a team design a website like frczero.org using Hugo? While the Learn Hugo Theme tutorial is a great resource for learning how to use Hugo, it does not cover how to design a knowledge website like frczero.org. For a teams website to be successful, it needs to be designed to be easy to use and easy to navigate. The learn theme may not be the best choice. The table below lists some of the most common themes for Hugo:\nTheme Name (link) Description Learn The learn theme is a theme designed for knowledge websites. Universal The universal theme is a GOOD choice for teams. Ananke The ananke theme is a theme designed for blog websites. Hugo Coder The hugo coder theme is a simple and clean blog theme. Theme.gohugo.io The theme.gohugo.io website lists many themes for Hugo. I used that to find these themes! How to Install Hugo on Windows (Properly!!!) Note: The following instructions are based on the Hugo Installation Guide\nDownload the latest version of Hugo from the Download the Windows ARM 64bit version or see the Hugo Releases page for other versions.\nExtract the zip file to a folder on your computer. (I recommend somewhere with a short path like C:\\hugo). The zip file should contain a single executable file named hugo.exe and a folder named LICENSE.md and README.md. If you try to run the hugo.exe file now, it will open a command prompt window and then close. This is because the hugo.exe program is not a gui program. It is a command line program. To run the hugo.exe program, you need to open a command prompt window and then run the hugo.exe program from the command prompt window. DO NOT DO THAT YET! Wait for step 7.\nOpen the command prompt window. To do this, press the Windows key and the R key at the same time. This will open the Run dialog box. In the Run dialog box, type cmd and then press the Enter key. This will open the command prompt window. (You should do this as an administrator. To do this, right click on the command prompt icon and then click on the \u0026ldquo;Run as administrator\u0026rdquo; option.)\nIn order to actually use the hugo command and not have to use C:/hugo/hugo.exe you need to add it to your PATH! To do this in the command prompt window type set PATH=%PATH%;C:\\hugo\\bin and then press the Enter key. (You should replace C:\\hugo\\bin with the path to the folder where you extracted the hugo.exe program.)\nChange the directory to the folder where you extracted the hugo.exe program. To do this, type cd C:\\hugo and then press the Enter key. (You should replace C:\\hugo with the path to the folder where you extracted the hugo.exe program.)\nTo test that the hugo command is working, type hugo version and then press the Enter key. This should print the version of Hugo that you installed. If it does not print the version of Hugo that you installed, then you should go back and make sure that you followed the instructions correctly.\nIf you are confident that you followed the instructions correctly, then you should try to reinstall Hugo. If you are still having problems, then you should submit an issue on the frczero.org github repo How can a team use the Universal theme and Hugo? Note: The following instructions are based on the Universal Theme Quick Start Guide. To see the theme in action, visit the Universal Theme Demo.\nCreate a new Hugo website using the following command:\nhugo new site my-website Change the directory to the new website:\ncd my-website Add the Universal theme to the website. There are 2 methods based on whether or not you have Git installed on your computer. If you do not have Git installed on your computer, then you should use the first method. If you do have Git installed on your computer, then you should use the second method:\nMethod 1: Download the theme as a zip file and extract it to the website:\nDownload the theme from the Universal Theme Github Repo as a zip file. Extract the zip file to the websites themes folder. If one does not exist, then create one. You need to rename the folder that you extracted from hugo-universal-theme-master to hugo-universal-theme. Method 2: Clone the theme using Git and add it to the website (Still rename the folder to hugo-universal-theme after cloning):\nmkdir themes cd themes git clone https://github.com/devcows/hugo-universal-theme Open up the website configuration file called config.toml and add the following content:\nstyle = \u0026#34;default\u0026#34; defaultContentLanguage = \u0026#34;en\u0026#34; title = \u0026#34;My Website\u0026#34; theme = \u0026#34;hugo-universal-theme\u0026#34; [params] disabled_logo = false logo_text = \u0026#34;Universal\u0026#34; logo = \u0026#34;img/logo.png\u0026#34; logo_small = \u0026#34;img/logo-small.png\u0026#34; You can go into much greater detail with the configuration file, but this is the bare minimum that you need to get started. To learn more visit the Universal Theme Configuration Guide.\nRun the project using the following command:\nhugo server Open up a web browser and go to the following address:\nhttp://localhost:1313/ You should see the following page:\nTo create a new page, run the following command (You should probably do this from a different command prompt window):\nhugo new page about.md Open up the new page in a text editor or VS code and add the following content:\n--- title: \u0026#34;About\u0026#34; date: 2019-01-01T00:00:00-05:00 draft: false --- Hello World! Save the file and then go to the following address in your web browser:\nhttp://localhost:1313/about/ You should see the following page:\nIf you are having problems, then you should go back and make sure that you followed the instructions correctly. If you are confident that you followed the instructions correctly and you are still having problems, then you should submit an issue on the frczero.org github repo Keep reading and following the official Universal Theme Quick Start Guide to learn more about the theme and how to make the most of it. You will have to rename the Menu tabs to match your team\u0026rsquo;s needed layout. This is done by creating files called partials in the layouts/partials folder. There are lots of examples of the partials in the themes folder and the exampleSite folder.\nWhen you are ready to publish your website, run the following command:\nhugo Note: When you run the hugo command, it will create a public folder. This folder contains all of the files that you need to upload to your webhosting service.\nHow can a team use the Ananke theme and Hugo? Note: The following instructions are based on the Hugo Quick Start Guide. This also assumes you have already installed Hugo on your computer.\nNote 2: The following instructions are based on the Ananke Theme Quick Start Guide. To see the theme in action, visit the Ananke Theme Demo.\n//TODO: These instructions are incomplete and students had issues following them at a recent workshop. They need to be updated. 1. Create a new Hugo website using the following command: ```bash hugo new site my-website ``` 2. Change the directory to the new website: ```bash cd my-website ``` 3. Add the Ananke theme to the website: ```bash git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke themes/ananke ``` 4. Copy the example site configuration to the website: ```bash cp themes/ananke/exampleSite/config.toml . ``` 5. Edit the website configuration file called config.toml and change the theme to ananke: ```toml theme = \u0026#34;ananke\u0026#34; ``` 6. Create a new post using the following command: ```bash hugo new posts/my-first-post.md ``` 7. Edit the post file called my-first-post.md and add the following content: ```markdown --- title: \u0026#34;My First Post\u0026#34; date: The Date Goes Here as a Timestamp draft: false author: \u0026#34;Your Name\u0026#34; editors: \u0026#34;Your Team Members\u0026#34; --- This is my first post! ``` 8. Build the website using the following command: ```bash hugo ``` 9. Serve the website using the following command: ```bash hugo server ``` 10. Open the website in a web browser using the following URL: ```url http://localhost:1313/ ``` 11. Edit the website configuration file called config.toml and change the title to your team\u0026#39;s name: ```toml title = \u0026#34;Your Team\u0026#39;s Name\u0026#34; ``` 12. Edit the website configuration file called config.toml and change the base URL to your team\u0026#39;s website URL: ```toml baseURL = \u0026#34;https://your-team-website-url.com/\u0026#34; ``` 13. Edit the website configuration file called config.toml and change the author to your team\u0026#39;s name: ```toml author = \u0026#34;Your Team\u0026#39;s Name\u0026#34; ``` 14. Edit the website configuration file called config.toml and change the description to your team\u0026#39;s description: ```toml description = \u0026#34;Your Team\u0026#39;s Description\u0026#34; ``` **Note:** The description is used by search engines to describe your website. If you have a good description, your website will be more likely to show up in search results. 15. Make your posts and eventually add them to your webhosting service: ```bash hugo ``` How can a team design a website like frczero.org using WordPress? // TODO - Add instructions for using WordPress\nHow can a team design a website like frczero.org using Django? // TODO - Add instructions for using Django\nHow can a team design a website like frczero.org using a website builder? // TODO - Add instructions for using a website builder\nHow can a team design a website like frczero.org from scratch? // TODO - Add instructions for designing a website from scratch\nCurrently Mr. Siefen has a very very very\u0026hellip;. very basic website from scratch guide on his personal blog here. He recommends skipping part 1 unless you are interested in learning about hosting with AWS\u0026hellip; its not fun.\nHow can a team host a website using a free hosting service? // TODO - Add instructions for hosting a website using a free hosting service\nHow can a team host a website using a paid hosting service? // TODO - Add instructions for hosting a website using a paid hosting service\nHow can a team host a website on a team member\u0026rsquo;s computer? // TODO - Add instructions for hosting a website on a team member\u0026rsquo;s computer\nHow can a team use services like Read the Docs to host a website? // TODO - Add instructions for using services like Read the Docs to host a website\nHow can a team use GitHub Pages to host a website? // TODO - Add instructions for using GitHub Pages to host a website\nHow can a team use Netlify to host a website? // TODO - Add instructions for using Netlify to host a website\nHow can a team use AWS to host a website? // TODO - Add instructions for using AWS to host a website\n"
},
{
	"uri": "https://frczero.org/outreach_education/",
	"title": "9.0 Outreach &amp; Education",
	"tags": [],
	"description": "",
	"content": "9.0 Outreach \u0026amp; Education Outreach and education are important parts of the FIRST experience. Outreach is the process of sharing your team\u0026rsquo;s experience with others. Education is the process of learning about FIRST and the FIRST Robotics Competition and STEM. Outreach and education are important because they help to grow the FIRST community. The more people that are involved in FIRST, the more people that will be inspired to pursue STEM careers. The more people that are inspired to pursue STEM careers, the more people that will be able to solve the world\u0026rsquo;s problems. There are many ways to get involved in outreach and education. If you would like to get involved, talk to your team mentor or team leadership. For a direct way to get involved, check out the FIRST Volunteer Portal or submit content here to the FRC0 website for others to learn from too!\nBelow is an outline of the topics that will be covered in this chapter.\nContents for this Chapter Order Page Title Time Estimate 9.1 FIRST Outreach 30 minutes 9.2 FIRST Education 30 minutes 9.3 FIRST Volunteer Portal 30 minutes 9.4 FIRST Volunteer Portal - Volunteer Opportunities 30 minutes 9.5 FIRST Volunteer Portal - Volunteer Events 30 minutes 9.6 FIRST Volunteer Portal - Volunteer Resources 30 minutes 9.7 FIRST Programs and Student Engagement 30 minutes 9.8 STEM Outreach 30 minutes 9.9 FIRST Outreach - FIRST LEGO League 30 minutes 9.10 FIRST Outreach - FIRST Tech Challenge 30 minutes 9.11 FIRST Outreach - FIRST Robotics Competition 30 minutes "
},
{
	"uri": "https://frczero.org/electronics/electronics-troubleshooting/falcon-500-fixes/",
	"title": "4.9.4 Falcon 500 Fixes",
	"tags": [],
	"description": "",
	"content": "What is a Falcon 500? The Falcon 500 is a motor and motor controller combination unit. It is a brushless motor with an integrated motor controller. The motor controller is a Talon FX motor controller. The motor is a brushless motor.\nLeaving aside any \u0026ldquo;Availability, Ethical (IFI Issues), Etc\u0026rdquo; The new Falcon v3s for the 2023 season have been noted to have a few issues. This page is a collection of fixes for those issues and to cover the basics of troubleshooting the Falcon 500 in the v1 and v2 variants as well.\nBefore you start, do you have your Falcon Fixing Kit? The Falcon Fixing Kit is a collection of tools and parts that you will need to fix the v1/v2 Falcon 500s. A B.O.M. for the v3 will be produced as soon as we get some\u0026hellip; The kit includes the following items:\nMedium Strength Loctite (Loctite 243) New screws for motor housings since the torx heads strip easily: Button Head Hex Drive Screw, Passivated 18-8 Stainless Steel, M3 x 0.50 mm Thread, 50mm Long McMaster-Carr Shaft shims 18-8 Stainless Steel Shims, for Shortening 5/16\u0026quot; Diameter Screw Shoulder, 0.02\u0026quot; Thick McMaster-Carr Hardened T10 Driver for case screws Bits, 1/4\u0026quot; Hex Shank for Power Tools, T10 Size McMaster-Carr Extended Hardened T8 bit for shaft screws Bits, 1/4\u0026quot; Hex Shank for Power Tools, T8 Size, 3-1/2\u0026quot; Long Overall Additional Notes from Chief Delphi User who came up with the B.O.M. above:\nI would also highly recommend you keep a bolt extractor set with left-handed drill bits and thread extractors. I had to use those on more than one occasion because the T10 case screws are soft and strip easily, or came out completely bent a few times after I fought them for an hour (hence the replacement screws above). We kept this set of tools and parts in the Falcon Un****** box and used it to QC verify (and fix) every one of the 32+ Falcon’s that passed through our shop last year.BOM Maker\u0026rsquo;s story from fixing them during the 2022 season\nContents for this Section Order Section Title 1. Wobbly Shaft 2. Broken Bolts 3. Missing Loctite 4. Overheating 5. Size Changes and Documentation Confusion 6. Falcon 500 V1 Teardown 7. Falcon 500 V2 Teardown 8. Falcon 500 V3 Teardown 9. Other Fixes Wobbly Shaft Teams who have bought Falcon v3 motors for the 2023 season have been reporting wobbly shafts. This is a result of the shaft tolerances being off and way out of the usual expected specs. It\u0026rsquo;s all a possible consequence of removing the shaft bolts(cuz they were loose cuz of missing loctite) It\u0026rsquo;s certainly not all motors, but teams ABSOLUTELY should check any v3 falcon 500s for this issue. Reddit Post identifying the issue\nFixes for the wobbly shaft 3d print a spacer to help keep the shaft on place. This can be the same falcon 500 spacers, but oversized by roughly 2mm. This came from the same reddit post, but has not been confirmed for a long term fix. Submit a RMA to VEX/CTRE/WCP for a replacement motor. This is a problem however as there are no parts for spares, vendors are out of stock for the remainder of the 2023 season https://www.vexrobotics.com/217-6515.html and if there are ones for RMA reserved, they will be subject to the same issue. This is a problem that will need to be addressed by the vendors. Don\u0026rsquo;t use a v3 Falcon 500 unless you dont have any other options. This is absolutely a really subpar option, but if you have no other options, you have no other options. Broken Bolts Teams who have bought Falcon 500s of all variants have been reporting broken bolts. This is a result of the bolts being too soft and stripping out or snapping. This is a problem that has been around for a while, but has been exacerbated by the new v3 falcons. These include longer screws that are too long in some cases and they were over tightened.\nFixes for the broken bolts Replace the bolts with stronger ones. This is a good option, but it is not ideal as Teams paying $220 for a motor should not have to replace the bolts. This is a problem that will need to be addressed by the vendors. If you break a bolt, you can use a bolt extractor to remove the broken bolt. This is a good option, but can lead to damaging the threads if not done correctly. A guide on how to do this can be found here Many teams will not be in a situation that they would need to be removing bolts except for the other issues listed here. If you are in this situation, and you need to remove bolts you should seriously consider the risks involved and the potential damage to the motor. Missing Loctite Teams who have bought Falcon 500s of all variants have been reporting missing loctite. This seems like not a big deal, except the bolts are crucial to the performance of the motor and its overall safety. This is a problem that has been around for a while, but has been fixed/exacerbated by the new v3 falcons. The rush to get the v3 falcons out the door while trying to avoid this has led partially to the wobbly shaft, and this is something seemingly to have been overlooked as a consqeuence of trying to fix it on the v1 and v2s in the past. Without the loctite, the bolts can come loose and cause the motor to fail during a match or practice.\nFixes for the missing loctite Replace the bolts with stronger ones. This is a good option, because more than likely you will strip/snap a bolt trying to QA inspect your bolts for loctite. This is a problem that will need to be addressed by the vendors. While I would normally recommend not taking apart a motor, this is a situation where you should take apart the motor and inspect the bolts. If you find a bolt without loctite, you should replace it with a stronger bolt as with all of the bolts and you should add loctite to the bolts. Use the 243 as listed in the BOM above. Overheating The Falcon 500 motors are High-Performance motors, and as such, they are designed to be able to handle a lot of power. However, they are not designed to be able to handle a lot of power for a long period of time. The motors are designed to be able to handle a lot of power for a short period of time, and then they need to be allowed to cool down. This is a problem that has been around for a while, but has possibly been improved by the v3. The jury is still out on this one. The motors feature air cooling ports that can be attached to your pneumatics system. A guide for this is here under the section called \u0026ldquo;Using the Falcon 500 Cooling Port\u0026rdquo;. Many teams who are not familiar with this, or don\u0026rsquo;t see the benefit of it, will not use it. This is a problem that will lead to burnt out and overheated motors.\nFixes for the overheating Use the cooling ports. This is a good option and is what the port is literally made for. Monitor the motors temperature. This is a good option, and it can help you know when you should let air in the ports to conserve air and the motor. This requires some extra work, but the Phoenix Motor controllers using the IMotorController interface have a method called getTemperature() that can be used to get the temperature of the motor. This reports the data in celsius\u0026hellip; but whatever. Java API Doc Don\u0026rsquo;t use the cooling ports. This is a bad option, but if you don\u0026rsquo;t have the time to monitor the temperature, or you don\u0026rsquo;t have working pnuematics on the bot you can just not use them. This is a problem that will lead to burnt out and overheated motors. This is done at the risk of the Team choosing to not use the port. Rather silly if you ask me. Size Changes and Documentation Confusion Something that caught many people off guard is the new larger size of the v3 vs the v1/v2 models. The v3 size is correct in the cad model, but the website for the Falcon 500 only has a v2 2D drawing. While most teams would instinctively use the updated 3D model, some teams may grab the 2D v2 in a rush and not notice the size difference until its time to assemble it all. This would mean redesigning things in a hurry or having to use the v2/v1s that are smaller. This is a problem that will need to be addressed by the vendors and they need to update the website to reflect the correct size of the v3.\nFixes for the size changes and documentation confusion Use the v3 3D model. This is a good option, and is the correct option. If you are not using a v3 then this is not an issue for you. Falcon 500 V1 Teardown We have a teardown of the Falcon 500 V1 motor. This is a\nFalcon 500 V2 Teardown We have a teardown of the Falcon 500 V2 motor. This is a\nFalcon 500 V3 Teardown The pictures and account you see here is in no way fictional. This is a real account of a real person who has a real Falcon 500 V3 motor. This was verified by Mr. Siefen who runs FRC0 and wrote the following guide. He took the pictures, stripped the screws, opened the stuff you shouldnt ever open. He did this so you dont have to. If you follow this guide WE (FRC0) and HE (ME, Mr. Siefen) are not responsible. This is purely for informational purposes, unintentional comedic relief during a stressful build season moment, and to show you what can happen and possible fixes.\nSteps and Comments Remove the case screws from the front of the motor. These are T9 torx screws. There are 3 per end of the motor. These are shorter than the ones on the V1/V2 and hopefully help with the bending/snapping of the previous ones. The front plate and shaft will come off after the removal of the previous screws. The shaft has a toothed end of the spline shaft that is inserted into a matching insert on the rotor. If you notice this is already massively different from the previous versions. You can separate the shaft spline from the front plate by pulling it out through the back. If you examine the shaft you\u0026rsquo;ll see how the large end is one piece that was done on a lathe and then it\u0026rsquo;s placed over the spline shaft It\u0026rsquo;s then joined with a pin and ground down to keep it locked in place. Before removing the back case screws look at the insides where the front screws were attached The posts look a little beat up, I was very gentle and the new shorter bolts only have a small amount of grab. You may want to get longer screws (idk if this is possible yet) if you are planning on face mounting the falcon V3 Also notice how much clearance you have from the air cooling ports to the rotor. If you plan to use either air cooling port you should not over extend your fittings. There\u0026rsquo;s about a fly\u0026rsquo;s eyelash worth of gap before you\u0026rsquo;ll be hitting the rotor and unintentionally braking the motor Flintstones style. These are the screws from both the front and back casing. They are the same so you don\u0026rsquo;t have to worry about mixing these up. However these are the only T9 sized torx screws on the falcon. If you didn\u0026rsquo;t already you can now remove the back casing screws. Do this gently since it\u0026rsquo;s the same soft grade metal as before and can strip out. Again this is still an improvement over the long case bolts that would snap/bend inside the casing. We lost 3 falcons this way our first year with them. When you take these off the case can slide off. Don\u0026rsquo;t worry right now about remembering how it goes back. There are 3 slots on the front and back plates to align it properly for assembly. Funny how the back side of the casing has loctite but the front posts had 0 sign of this… grrrrrrrr This is as far as you would ever need to disassemble the front half of a Falcon. Anything past this is beyond your control from this side. Idk why you would ever need to get the rotor apart and I have no clue how you would do that. Look at the back side on the motors cap. There are 2 bolt heads and sizes here. Both are for the talonFX technically. The two screws around the FX cap are protecting a data port. They don\u0026rsquo;t need to be removed unless you plan to use the port. I do this later on The three T10 security screws suckkkkkkkkk We stripped one of the three out. We were gentle and I don\u0026rsquo;t see why a team should be doing this so proceed ahead at your own peril… These are two of the three T10 security head screws for the talonFX. These screws keep the cap, hall encoder and motor controller PCB all aligned. Taking this apart can mess this up! There\u0026rsquo;s no sign of loctite here unless my colorblindness has messed me up again here. So why did I take it apart anyways? Science? No. You\u0026rsquo;ll see why soon. First off, this screw started to strip before I even starting trying to apply any pressure at all. As someone on reddit said \u0026ldquo;Really wish people would stop using security screw heads on products only engineers and mechanics will use\u0026rdquo; We know the security risks inherit and we need to be able to service these $220 motors when they were not properly QCd by the vendor Moving on to the data port screws while I calm down from the stripped screw… This is a 2.5 Allen! No torx needed for once, but now we\u0026rsquo;ve introduced a third tool and bolt size on this thing. So make sure to have all 3 sizes handy. These screws are so small. They will get lost if you even sneeze while doing this step. At comp they will be gone in an instant. Do not lose them as they are also not a size you can get at the local store. You will be forced to try and cut a longer bolt and file it down to this stub by hand and blood and tears Back to the stripped T10. It has now been transformed into a flathead as our screw remover was removed from the robotics lab by ghosts or a pack of raiders. If you are like us and don\u0026rsquo;t have a screw extractor, you can try to make a slot on the head with a Dremel. This is something we have practiced a lot No you can\u0026rsquo;t ask why we practice this. If you try to do this method be careful to not cut too deep and damage the motor. If you cut too far or wobble while cutting you\u0026rsquo;ll take off too much of the bolts head and the flat head will not work. So then I got the cap off. Remember how I said earlier I had a good reason for removing the cap? When I took this motor out of the box and shook it I heard a rattle. At first I expected this to be the wobbly shaft, but it was fine luckily. Then as I did the tear down I expected to find some loose metal, a spare bolt, something wrong in the front side. No dice obviously you saw what I saw. The spacer that goes on the T10 was not where it belongs and was loose in the cap. The other one was glued in place like it should be. This helps keep the cap from being over tightened and also keeps the Hall sensor that is the encoders for the Falcon, aligned and flat with the motor. Without this we would have not gotten accurate encoder data and with this being for a drivetrain that\u0026rsquo;s killer. Okay so that\u0026rsquo;s the end of disassembling a Falcon. Time to put it all back together. For the most part just reverse the steps in the guide. Remember how I said before there are 3 slots on the casing? One is solid and the other two look different. If you look at the back plate and the front plate there are matching grooves. When putting everything back together make sure to line these slots up properly. It\u0026rsquo;s the only way it actually goes back together anyways without any gaps. Other Fixes Did we miss something?\nIf you have any other issues that you have found with the Falcon 500, please let us know by adding it to the listings or submitting an issue on our github repo. We will be updating this post as we find more issues and fixes.\n"
},
{
	"uri": "https://frczero.org/pneumatics/what-are-pneumatics/",
	"title": "5.1 What are Pneumatics?",
	"tags": [],
	"description": "",
	"content": "Originally discovered by the ancient Greeks, pneumatics is the study of air pressure. Pneumatics is a branch of fluid power that uses compressed air to power actuators. Pneumatic actuators are used to move mechanical parts, such as valves, cylinders, and other devices. Pneumatic systems are used in a wide variety of applications, including robotics, manufacturing, and construction.\nIn FRC teams typically use cylinders to extend and retract a piston. This can be used to move a mechanism in a linear direction, or to rotate a mechanism. Cylinders are usually measured by the stroke length, bore diameter, and rod diameter. The stroke length is the distance the piston can travel in one direction. The bore diameter is the diameter of the cylinder. The rod diameter is the diameter of the piston. The bore and rod diameters are usually the same. They can also come in a large variety of sizes and styles.\nA typical pneumatic system in FRC can look something like this:\nImage courtesy of FRC 358\nBelow is a downloadable copy of FIRST\u0026rsquo;s pneumatics guide. This guide is a great resource for learning about pneumatics. It covers the latest hardware changes, and includes a lot of useful information. I highly recommend reading this guide.\nDownload the Pneumatics Guide\n"
},
{
	"uri": "https://frczero.org/pneumatics/pneumatic-components/",
	"title": "5.2 Types of Pneumatic Components",
	"tags": [],
	"description": "",
	"content": "Pneumatic components are the parts of a pneumatic system that use compressed air to do work. There are many different types of pneumatic components. The most common pneumatic components are shown in the table below:\nComponent Description Image Vendor Link(s) Solenoid A solenoid is a valve that uses an electric current to open and close. It is used to control the flow of air in a pneumatic system. Solenoids can be 12v or 24v. There is a jumper on the PCM for this and it sets the voltage level for ALL solenoids attached to it. The solenoids are marked for which voltage level they are meant to work with. Andymark Double Solenoid A double solenoid is a valve that uses an electric current to open and close. It is used to control the flow of air in a pneumatic system. It has two ports, one for air in and one for air out. Solenoids of both kinds are usually attached to manifold Andymark Compressor A compressor is a device that uses an electric motor to compress air. It is used to provide the air pressure for a pneumatic system. Teams can prefill tanks with an offboard compressor board. It must still use the PCM as its controlling hardware. Andymark Pneumatic Cylinder A pneumatic cylinder is a device that uses compressed air to extend and retract a piston. These can come in a wide variety of sizes and shapes. Andymark Pneumatic Tank A pneumatic tank is a device that stores compressed air. They don\u0026rsquo;t all have to be plastic. There is not a limit on the capacity of your tanks, however they must be rated for higher than 125 PSI Andymark Pneumatic Fitting A pneumatic fitting is a device that connects two pneumatic components together. Fittings can come in many different styles. There are splitters, T taps, and more! Andymark Pneumatic Hose A pneumatic hose is a device that carries compressed air from one component to another. These can come in a variety of colors and styles. All of the ones for FRC are 1/4 inch in diameter. Andymark Pressure Release Valve A pressure release valve is a device that releases air pressure from a pneumatic system. There are several types of these used in FRC. There are levers, spring pulls and more. As long as it can safely vent air in a hurry! Andymark Pressure Switch A pressure switch is a device that detects when the air pressure in a pneumatic system is above or below a certain value. Andymark Pressure Gauge A pressure gauge is a device that displays the air pressure in a pneumatic system. Andymark Analog Pressure Sensor An analog pressure sensor is a device that converts the air pressure in a pneumatic system into an analog voltage. Andymark Pressure Regulator A pressure regulator is a device that controls the air pressure in a pneumatic system. Andymark Pneumatic Control Module A pneumatic control module is a device that controls the air pressure in a pneumatic system. CTRE, Andymark Pneumatic Hub The Pneumatic Hub features 16 solenoid channels which allow for up to 16 single-acting solenoids, 8 double-acting solenoids, or a combination of the two types. REV "
},
{
	"uri": "https://frczero.org/pneumatics/pneumatic-safety/",
	"title": "5.3 Pneumatic Safety",
	"tags": [],
	"description": "",
	"content": "Pneumatics are powerful and can be dangerous if not used properly. This section will cover the safety rules and guidelines for pneumatics. As is the case with all safety rules, they are not meant to be restrictive. They are meant to be guidelines to help keep you safe. If you have any questions about the safety rules, please ask your mentor or coach.\nSafety Rules Never use compressed air to propel a projectile. Never apply compressed air to the skin or direct it at a person. Even air at a pressure of 15 psig can cause serious injury. Never use a compressed air hose to clean dirt or dust from your clothing or body. Always wear safety glasses when working with pneumatics. Always check for humans and other objects in the path of the pistons, air, system, before turning on the compressor. Never turn on the compressor WITHOUT the pressure switch connected. Make sure that the release valve is open before turning on the compressor during initial setup. Wear ear protection. Exposure to excessive noise can damage hearing. Noise reducing mufflers can be fitted to machines to lessen the noise health hazard. Never use frayed, damaged or deteriorated hoses. Always store hoses properly and away from heat sources or direct sunlight. A hose failure can cause serious injury. Hose Reels can decrease your chances of injury, as well as help hoses last longer. Potential Hazards Tank Shattering Hearing Damage (Loud Compressor) Solenoid Failure (Misfiring mechanism) PCM Failure (Lack of control or Pressure Feedback) Air Leak (This can force hoses to slip off fittings) "
},
{
	"uri": "https://frczero.org/pneumatics/pneumatic-systems/",
	"title": "5.4 How to Setup a Pneumatic System",
	"tags": [],
	"description": "",
	"content": "Setting up a pneumatic system can be a daunting task. This section will cover the basics of setting up a pneumatic system. It will cover the basics of the components and how to connect them. It will also cover the basics of how to setup the compressor and the PCM and how to test the system.\nGatherings the Components The first step in setting up a pneumatic system is to gather the components. The components are listed below:\nCompressor Release Valve Pressure Switch Pressure Gauge x2 Manual Release Valve Air Tank Pressure Regulator Solenoid Pneumatic Hose Fittings \u0026amp; Connectors Pneumatic Control Module (PCM) or Pneumatic Control Hub (PCH) Compressor The air compressor is the heart of the pneumatic system. It is the device that compresses the air and stores it in the air tank. The compressor is connected to the PCM and the PCM controls the compressor. Compressors will automatically run unless the pressure switch is above the set pressure limit. The compressor can also be manually turned on and off from the robot code. The PCM and the compressor are connected with a 12V power cable. The red and black wire spots are marked on the PCM or Hub.\nThis is a close up of the wiring for the compressor and the PCM.\nRelease Valve The release valve is used to release the pressure from the system. The release valve is a non-electrical system that will manually go off if the pressure switch is overridden. All excess air pressure over 125psi will be released automatically when tuned properly. This is checked and tested by the inspectors.Don\u0026rsquo;t wait until competition to find out that your release valve is not working. Test it before you get to competition and while initially putting the system together.\nThis is a close up of the release valve.\nPressure Switch The pressure switch is used to control the compressor. The pressure switch is connected to the PCM next the compressor. The pressure switch is used to turn the compressor on and off. The pressure switches\u0026rsquo; air port is connected to the system on the high pressure side. By default the pressure switch is set to 120 psi. The pressure switch should NOT be adjusted. This is checked and tested by the inspectors. If the pressure switch is adjusted, the team will have to replace it with a stock one.\nThis is a close up of the tubing and port connection for the pressure switch.\nPressure Gauge (High Side) Pressure guages help us (humans) see the current PSI of the system using an analog (not electrical analog) dial indicator. The pressure gauge is connected to the system on the high pressure side. The best way to be able to use it is to put it somewhere that you can see it. Many teams will connect a T fitting to the high pressure side and then connect the pressure gauge and the pressure switch to the T-fitting(s). This allows the pressure gauge to be easily seen and the pressure switch to be easily connected. If it is also located near the manual release valve, it can be used to check the pressure before releasing the valve.\nThis is a close up of the tubing and port connection for the pressure gauge.\nManual Release Valve The manual release valve is used to release the pressure from the system. The manual release valve is a non-electrical system that will manually go off if a lever is pulled or a ball valve is turned. All air pressure from the system will be released when the valve is opened. This is checked and tested by the inspectors. This is a safety feature that is required on all FRC robots that store compressed air. It should be easily accessible and easy to use after a match has ended.\nThis is a close up of the manual release valve.\nAir Tank The air tank(s) are also located on the high side of the system. The tanks with either have a 1/4\u0026quot; NPT port or a threaded port to attach your own connectors. Whenever you are adding a new fitting, or removing an existing one, on a tank you need to:\nMake sure the tank is empty Wrap the threads with Teflon tape Tighten the fitting (Don\u0026rsquo;t over tighten) Check for leaks with a low pressure fill test before adding to your full system Add soap and water to an old spray bottle and spray the fittings to check for leaks. If you see bubbles, you have a leak. This is a close up of the tubing and port connection for the air tank.\nPressure Regulator The pressure regulator is what sets the PSI level for the low side of the system. Best practice is to set the pressure regulator to 60 psi. Solenoids can operate at more or less pressure by adjusting the regulator. Most regulators have a knob that can be turned to adjust the pressure. In order to adjust it you have to first pull up on the knob and then turn it. Clockwise increases the pressure and counter-clockwise decreases the pressure. The pressure regulator has an input side and an output side. Make sure which is which! The input side is sometimes marked with an triangle like in the picture below. The input side is the side that is connected to the high pressure side of the system. The output side is the side that is connected to the low pressure side of the system.\nThis is a close up of a pressure regulator.\nSolenoid In order to control the flow of air we use a special type of valve called a solenoid. Solenoids are controlled by the PCM or PCH. The solenoid has a port on the input side and a port on the output side. The PCM or PCH will send a signal to the solenoid to open or close the valve. The solenoid will open or close the valve depending on the signal it receives. The red and black wire spots are marked on the PCM or Hub. The block underneath the solenoid is called a manifold. The manifold is used to connect the air ports to the solenoid.\nThis is a close up of a solenoid and manifold.\nPneumatic Hose There are many vendors that sell the proper hose for pneumatic systems. The hose is measured by the inside diameter (ID) and the outside diameter (OD). The OD is the size of the hose and the ID is the size of the port that it connects to. The OD of the hose should be 1/4\u0026quot; and the ID of the port should be 1/4\u0026quot;. The hose should be flexible and not kink easily. The hose should be able to withstand the pressure of the system (125 psi MAX). Below is a table with the different types of hose and their pressure ratings with a column for the vendor with a link to the product page:\nVendor Hose Type Pressure Rating Link McMaster-Carr Polyurethane 150 PSI Link AndyMark Polyurethane 125 PSI Link AndyMark Polyurethane 116 Official/125 Tested PSI Link VEX Polyurethane Not Listed PSI Link Fittings \u0026amp; Connectors Fittings and connectors can vary wildly from vendor to vendor. The fittings and connectors should be able to withstand the pressure of the system (125 psi MAX). Below is a table with the different types of fittings and connectors and their pressure ratings with a column for the vendor with a link to the product page:\nVendor Fitting Type Pressure Rating Link McMaster-Carr Push to Connect 150 PSI Link AndyMark Various 125 PSI Link VEX Push to Connect Not Listed PSI Link Below is a chart with some images of the different types of fittings and connectors. Please note teams will have different names they use as casual names for the fittings and connectors. The names in the chart are the official names for the fittings and connectors:\nFitting/Connector Image Description Push to Connect Threaded 1/4\u0026quot; NPT port Push to Connect fittings are used to connect the hose to the ports. They are easy to use and can be used with a wide variety of hose. Push to Connect to 1/4\u0026quot; NPT Push to Connect to 1/4\u0026quot; NPT fittings are used to connect the hose to the ports. They are easy to use and can be used with a wide variety of hoses and fittings between the various styles of connectors. Push to Connect (T Connector) This type of connector splits off into 3 ends that can have Push to Connect ends Threaded 1/4\u0026quot; NPT (T Connector) This type of connector splits off into 3 ends that can accept 1/4\u0026quot; NPT fittings. 1/4\u0026quot; NPT 1/4\u0026quot; NPT fittings are used to connect the hose to the ports. They are easy to use and can be used with a wide variety of hose. 1/4\u0026quot; NPT to 1/4\u0026quot; NPT 1/4\u0026quot; NPT to 1/4\u0026quot; NPT fittings are used to connect the hose to the ports. They are easy to use and can be used with a wide variety of hose. 1/4\u0026quot; NPT to 1/4\u0026quot; NPT to 1/4\u0026quot; NPT (T Connector) 1/4\u0026quot; NPT to 1/4\u0026quot; NPT to 1/4\u0026quot; NPT fittings are used to connect the hose to the ports. They are easy to use and can be used with a wide variety of hose. There are also smaller types of fittings that are typically used for the solenoids. These are typically 1/8\u0026quot; NPT fittings. These are typically used for the solenoids and are not typically used for the main air lines. They can have a smaller diameter hose and are typically used only on the low pressure side of the system.\nUsing all of the combinations of fittings and connectors, you can create a wide variety of pneumatic systems. Your team will need to figure out what works best for your team\u0026rsquo;s unique hardware setup. Below are some example pneumatic fitting images in the context of FRC to help you get started:\nThis is an example of \u0026ldquo;The Fitting Type\u0026rdquo; connecting \u0026ldquo;__ \u0026amp; __ \u0026quot;\nThis is an example of \u0026ldquo;The Fitting Type\u0026rdquo; connecting \u0026ldquo;__ \u0026amp; __ \u0026quot;\nThis is an example of \u0026ldquo;The Fitting Type\u0026rdquo; connecting \u0026ldquo;__ \u0026amp; __ \u0026quot;\nThis is an example of \u0026ldquo;The Fitting Type\u0026rdquo; connecting \u0026ldquo;__ \u0026amp; __ \u0026quot;\nThis is an example of \u0026ldquo;The Fitting Type\u0026rdquo; connecting \u0026ldquo;__ \u0026amp; __ \u0026quot;\nConnecting the PCM or PCH to the RoboRIO and PDP Finally we can go through the process of connecting up the PCM or PCH to the RoboRIO and PDP. The PCM or PCH is connected to the RoboRIO and PDP using a 2 wire daisy chain commonly used in FRC called CAN. CAN or Controller Area Network is a serial bus that is used to connect multiple devices together. The RoboRIO and PDP are both CAN devices and the PCM or PCH is also a CAN device. You can support up to 63 CAN devices on a single CAN bus. most devices in the system will have 2 seperate Channels for in and out, except the Roborio which is a special case. The Roborio is always the starting point of your CAN connection in FRC.\nIn logical order the wiring for CAN should always go like this: RoboRIO -\u0026gt; (Other CAN devices) -\u0026gt; PCM or PCH -\u0026gt; (Other CAN devices) -\u0026gt; PDP (have the termimating resistor jumper active on the PDP)\nIn a system with no other CAN components, like CAN motor controllers or sensors, the PCM or PCH is connected to the RoboRIO and PDP using the following diagram:\nThis is a close up of the PCM or PCH to the RoboRIO and PDP. Note: The process is the same for both! This diagram was made in Fritzing. I dont have a PCH fritzings part so I used the PCM part. The PCH is the same as the PCM for CAN connection.\nThe power connections for the PCM or PCH are as follows:\nBattery Positive -\u0026gt; Breaker -\u0026gt; PDP Positive -\u0026gt; Roborio and PCM/PCH Positive through their dedicated and marked ports\nBattery Negative -\u0026gt; PDP Negative -\u0026gt; Roborio and PCM/PCH Negative through their dedicated and marked ports\n"
},
{
	"uri": "https://frczero.org/pneumatics/pneumatic-control/",
	"title": "5.5 Pneumatic Control",
	"tags": [],
	"description": "",
	"content": "Pneumatic control is the process of controlling the flow of air to the pneumatic system. This is done by using solenoids to control cylinders of various shapes and sizes. All of the cylinders are controlled using the same basic hardware. At a minimum, if you have followed along you should have a compressor, a pressure switch, a release valve, and a solenoid. The solenoid is the only part of the system that is controlled by the robot. The compressor and solenoids are controlled by the PCM/PCH. The pressure switch stops the compressor if it detects anything above 125 psi. In case that fails there should ALWAYS be a mechanical safety valve that is properly tuned.\nWithout diving into the code portion yet, let\u0026rsquo;s look at the hardware. The solenoid is the only part of the system that is controlled by the robot so far. The compressor will just automatically run nonstop until a certain max PSI limit is reached. This assumes there is code for enabling the compressor somewhere in your code. A guide for this including with the changes for 2023 is here for Java and C++.\nControlling the Different Solenoids via Code There are two different types of solenoids that are used in FRC. The first is the single solenoid. This is the most basic solenoid and is used to control airflow in a single direction. The second is the double solenoid. This is used to control two different directions of airflow. Both have some basic commands for controlling them. This is an example from wpilib for the single solenoid. An example for the double solenoid is here.\nOperating the Solenoids Manually (Without Full Code) NOTE: You still need to have the rest of your system enabled and controlled with the PCM/PCH properly. This is just a way to manually control the solenoids without having to write code for it. This is useful for testing and debugging.\nMany of the FRC solenoids feature a button on their top. When this is pressed it forces the solenoid to change the direction of the air flow. This should be done with EXTREME CAUTION as you will be right next to the solenoid, and given the laws of space and time, probably near the cylinder you\u0026rsquo;re gonna set off.\nThe button on the top of the solenoid is used to manually change the direction of the air flow.\nControlling the Air Compressor in Code with Better Feedback By using an analog pressure sensor, teams can get much more detailed information about the pressure in the system. This allows for more accurate control of the system. This is especially important for teams that are using a compressor that is not controlled by the PCM/PCH. This is a guide for using the analog pressure sensor in Java and C++.\n"
},
{
	"uri": "https://frczero.org/pneumatics/pneumatic-troubleshooting/",
	"title": "5.6 Pneumatic Troubleshooting",
	"tags": [],
	"description": "",
	"content": " Sometimes things dont work as expected. This section will help you troubleshoot your pneumatic system.\nCommon Issues with Pneumatics Pneumatic solenoids are not working Check the solenoid wiring. Is the solenoid wired to the PCM? Is the solenoid wired to the correct channel? Is the solenoid wired with the correct polarity? Check the solenoid. Is the solenoid plugged in? Is the solenoid broken? If using a manifold, check the manifold for a proper seal If its a double solenoid, check they are both not firing at the same time Check the PCM. Is the PCM powered? The PCM is connected to the PDP and there is a small 20A fuse on the PDP for it and the VRM to share. Check the status of this fuse. Is the PCM wired to the correctly via CAN? Does it have the proper CAN ID? The PDP and PCM should ALWAYS ALWAYS ALWAYS have the same CAN ID of 0! All of the FRC libraries assume this ID setup! Is the PCM firmware up to date? A guide to updating the PCM firmware can be found here as well as a general primer to CTRE CAN devices. For more specifics about troubleshooting for the PCM check here Is the system enabled? Check the code to make sure the system is enabled. Check the dashboard to make sure the system is enabled. Is the Robot Status Light flashing or solid? If flashing, the robot is enabled If solid, the robot is disabled but powered on. If off, the robot is not powered on. Is the system full with enough air to move the cylinder? Check the pressure gauge to make sure the system is full. Check the pressure regulator to make sure the low side level is set to around 60 psi for most teams. Pneumatic solenoids are not firing at the same time Check the Previoisly mentioned items for the solenoids. Check the code to make sure the solenoids are firing at the same time. If using a double solenoid, only use one k.direction command at a time. Check where the solenoids are being fired from. If they are being fired from different commands they will never truly be firing at the same time. The command scheduler will only run one command at a time for a subsytem. If you want to fire both solenoids at the same time, you will need to fire them from the same command. If using a timed robot, check that whatever functions are firing the solenoids are not being called seperately. If they are, they will not be firing at the same time. Are both solenoids using the same types of fitting and length of tubing? If not, the solenoids will not be firing at the same time. The solenoids will be firing at different times depending on the length of tubing and the fittings used. a. The amount of air needed to move the cylinder is dependent on the length of tubing and the fittings used. There are specifically fittings with screw caps that let you fine tune the pressure for each solenoid or cylinder. If yes, check for any physical leaks on the solenoids or the tubing connections. a. Get an old bottle with a spray nozzle and spray a SMALL amount soapy water on the connections. If bubbles appear, there is a leak. The System is Never \u0026ldquo;Full\u0026rdquo; and the Compressor Runs Forever Check the pressure gauges on both sides of the system (high and low pressure) If the low pressure gauge is reading 0 psi, the pressure regulator may be setup incorrectly. Check the direction of the pressure regulator. The high side is the inlet and the low side is the outlet. Check the low side pressure. It should be around 60 psi for most teams. If the high pressure gauge is reading 0 psi, the system is not full and has no air stored. Check that all manual valves are closed. Check all pneumatic fittings for leaks. Check the connections to the compressor for the release valve and the pressure switch. Check the pressure switch. If it is broken, the compressor may NEVER turn off. The System is Full but the Compressor Runs Intermittenly at Rest NOTE: Some air loss is unavoidable. The compressor will run to keep the system full. If the system is full and the compressor is running anyways, this is NOT normal. Check the pressure gauges on both sides of the system (high and low pressure) Check for leaks at all connection points. Check the connections to the compressor for the release valve and the pressure switch. If the release valve is not tuned properly it may be letting air out of the system too early. If the pressure switch has a loose connection or is broken, the compressor may operate intermittently. The PCM has a Sticky Fault Check the PCM for a sticky fault. Check the phoenix tuner self test. There is a clear sticky fault button on the self test menu! I have no idea if this can happen to the PCH but phoenix is only for CTRE products so I am assuming not. Check the status light on the PCM. Whats a sticky fault? A sticky fault is a fault that is not cleared by the code. This means that the code is not telling the PCM to clear the fault. This can happen if the code is not running or if the code is not telling the PCM to clear the fault. This can also happen if the PCM is not wired to the CAN bus properly. What makes it sticky? A sticky fault is a fault that is not cleared easily with a reboot. The PCM is Connected, I Can See it\u0026rsquo;s Proper Firmware version, but the Compressor Doesn\u0026rsquo;t Run Check the status light on the PCM. If the status light is flashing, the PCM is enabled. If the status light is solid, the PCM is disabled. If the status light is off, the PCM is not powered. Check the code to make sure the compressor is enabled. With the introduction of the new PCM firmware, the compressor enable command is NOT the traditional setClosedLoopControl(true) command. The new command is setDigitalEnable(true) for Java. Another new deprecated command is enabled(). This function checked the status of the compressor. Now it is called isEnabled() for clarity. Check the WPIlib documentation for more information here The PCM is Connected, I Can See it\u0026rsquo;s Proper Firmware version, but the Solenoids Don\u0026rsquo;t Fire Check the status light on the PCM. If the status light is flashing, the PCM is enabled. If the status light is solid, the PCM is disabled. If the status light is off, the PCM is not powered. Check the code to make sure the solenoids are set to the proper port number and PneumaticsModuleType. With the introduction of the new PCM firmware, the commands for setting up the solenoid objects are not the same as the old PCM firmware either. The new commands are Solenoid exampleSolenoidPCM = new Solenoid(PneumaticsModuleType.CTREPCM, 1); for a PCM, or Solenoid exampleSolenoidPH = new Solenoid(PneumaticsModuleType.REVPH, 1); for a PCH. With the introduction of the new PCM firmware, the commands for setting up the double solenoids are not the same as the old PCM firmware either. The new commands are DoubleSolenoid exampleDoublePCM = new DoubleSolenoid(PneumaticsModuleType.CTREPCM, 1, 2); for a PCM, or DoubleSolenoid exampleDoublePH = new DoubleSolenoid(9, PneumaticsModuleType.REVPH, 4, 5); for a PCH. Check the WPIlib documentation for more information here "
},
{
	"uri": "https://frczero.org/pneumatics/pneumatic-resources/",
	"title": "5.7 Pneumatic Resources",
	"tags": [],
	"description": "",
	"content": "Below is a table of resources for pneumatics. These resources are provided by FIRST and other organizations.\nResource Description Link Last Updated Official Pneumatics Manual The pneumatics manual is a resource for teams to use when designing and building their pneumatic system. It contains information on the pneumatic system, the components, and the rules. Pneumatics Manual 2023-01 Pneumatics Tutorial This tutorial is written by FIRST Robotics Team 358. Pneumatics Tutorial ? Intro to Pneumatics This tutorial is written by Portland State University. Intro to Pneumatics ? Pneumatics Category of ChiefDelphi This section of the Chief Delphi forums are focused on solely pneumatics. Chief Delphi N/A "
},
{
	"uri": "https://frczero.org/cad/fusionfirst/",
	"title": "7.1 Fusion 360",
	"tags": [],
	"description": "",
	"content": "What is Fusion 360? Fusion 360 is a 3D Design, CAM, and CAE tool from Autodesk. It is a cloud-based tool that allows you to design, simulate, and manufacture your robot. It is available for free to all FIRST Robotics Competition teams. Students and Mentors should sign up for a free account at https://www.autodesk.com/education/edu-software/overview?sorting=featured\u0026amp;filters=individual. After you setup or activate the Fusion 360 Educational access you should download it from https://www.autodesk.com/products/fusion-360/students-teachers-educators. You can also download the Fusion 360 app for your mobile device from the app store.\nWhat are some of the Pros and Cons of Fusion 360 vs. other CAD tools? Pros Cons Free for all FIRST Robotics Competition teams Cloud-based Available on Windows \u0026amp; Chromebooks Collaboration is easy File Viewer available for iOS and Android Cloud-based Teams Setup can be confusing How do I get started with Fusion 360? 1. Download Fusion 360 Download Fusion 360 from https://www.autodesk.com/products/fusion-360/students-teachers-educators. You can also download the Fusion 360 app for your mobile device from the app store.\n2. Install Fusion 360 Install Fusion 360 on your computer. You can also install the Fusion 360 app on your mobile device to view your designs on the go.\n3. Sign into your Fusion 360 account Sign into your Fusion 360 account. Double check that you are signed into the correct account. If you are not signed into the correct account, you can sign out and sign back in with the correct account. The fusion 360 Education account is different from the Personal account and has much more functionality. Your files and team connections will be different for each account as well.\n4. Create a new Fusion 360 Team or join an existing team If you are creating a new team, you will need to create a new team name. If you are joining an existing team, you will need to know the team name. The educator in charge of the \u0026ldquo;license seats\u0026rdquo; should also send a team invite email to make the process smoother, but it is not required.\nYou can always join a team later if you are not sure what team you are on. You can also create a new team later if you are not sure what team you are on or want to seperate your projects and work spaces with different organizations.\n5. Create a new Fusion 360 Project Create a new Fusion 360 Project. You can create a new project for each year or for each project. You can also create a new project later if you are not sure what project you are working on just yet. When making a new project, you can choose what to name it, where it is stored and more. If you dont know what to name it, you can always change it later, but you should know what you intend to make before you start trying to make it. \u0026ldquo;Robot Ideas\u0026rdquo; is a good name for a project that you are just starting to work on. \u0026ldquo;Robot 2023\u0026rdquo; is a good name for a project that you are working on for the 2023 season. \u0026ldquo;Robot 2023 - Chassis\u0026rdquo; is a good name for a project that you are working on for the 2023 season and is just for the chassis.\n6. Create a new Fusion 360 Design Create a new design by clicking on the + at the top of the screen. If you just opened Fusion 360 it opens with a new empty design called Untitled by default. You cannot import any outside parts or components into that design until you save it somewhere and give it a proper name.\nImporting parts and components into a design is covered in the next section. One other thing to note about your design before you make anything is to double check the Document Settings: units value to make sure its in whatever system you prefer (Metric or Standard).\n7. Import parts and components into your design If teams think ahead they can put all 3rd party vendor files into organized folders and then import them into their design. This will save a lot of time and effort later on. If you are just starting out, you can import parts and components into your design as you need them. You can also import parts and components into your design later if you are not sure what you need just yet.\nIf you are uploading a new part to Fusion 360, you can upload it from your computer by hitting the Upload button, then either browsing or dragging and dropping the files. Fusion is best at handling NON-MESH files like STEP. It can handle many types, but meshes like STL, OBJ, and FBX are not as good and will slow fusion to a crawl on even the beefiest of gaming computers.\nIf you are importing a part from a vendor, you should try to keep the original part names for the files. Vendors like McMaster-Carr and REV Robotics have a lot of similar parts and it is easier to find them if you know the part number.\nHow can I find a vendor part STEP file to even import? NOTE: every vendor has a different process for this. This is just a general overview of how to find a STEP file for a part. If you are having trouble finding a STEP file for a part, ask your mentor or a team member who has done it before. FRC discord and Chief Delphi are great places to ask for help also.\nVendor CAD Resources Link AndyMark (STEP Files) https://www.andymark.com/pages/resources-files?prefix=STEP%20Files/ AndyMark (2D Drawings) https://www.andymark.com/pages/resources-files?prefix=PDF%20Drawings/ VEX Robotics https://www.vexrobotics.com/pro/all/?q=empty\u0026amp;vex_site=cads VEX Robotics (Solidworks Partnership Search) https://www.3dcontentcentral.com/Search.aspx?arg=FRC\u0026amp;SortBy=match\u0026amp;PageSize=10\u0026amp;contentsourcefilter=Supplier%7CPlastic%20Supplier%7C-UserSupplied%20(SupplierAgent)%7CUser\u0026amp;suppliernavigator=VEX%20Robotics REV Robotics (CAD General) https://docs.revrobotics.com/docs/rev-ion#cad REV Robotics (Solidworks Partnership Page) https://www.3dcontentcentral.com/parts/supplier/REV-Robotics.aspx 9. Making a plate for the Power Breaker in Fusion 360 Step 1: Import the Power Breaker STEP file into your design. This one is tricky to find so im going to link download a copy I have hosted here. This one originally came from here.\nStep 2: Create a new sketch on the bottom face of the Power Breaker. This is the face that has the 4 holes for the screws. NOTE: Only 2 of the holes are used for the screws. The other 2 are for the Battery Positive line. You can ignore those holes.\nThis is what the sketch should look like. The sketch is a 2D representation of one face of the 3D model. You can see the 3D model in the background. The sketch is on the \u0026ldquo;bottom face\u0026rdquo; of the 3D model.\nStep 3: Select both screws by Ctrl + Clicking on them. Then clicking on the drop down at the bottom of the create tab, select the \u0026ldquo;Project\u0026rdquo; option near the bottom of the list. This will project the edges and lines that make up our bolt holes onto the sketch. This is a very useful tool for making holes in plates and other parts from existing 3D models.\nStep 4: Add a centered rectangle around the middle of the breaker. This is still part of the same sketch. For this short example you can just eyeball the center of the breaker. For more complex parts you can draw center lines or project more edges to get midpoints.\nStep 5: The size of the plate should leave plenty of room for easy safety access and leaving enough room for bolts with even a really thin material.\nStep 6: Finish the sketch by clicking the check mark at the top of the screen. This will take you back to the 3D design mode with your sketch visible. Now we can select the rectangle and extrude it out to make the plate. Note the extra pieces from the edges might get selected. You want the entire rectangle to be highlighted blue except for the holes. If you have extra pieces selected/unsleected, you can click on them with the Ctrl key held down to deselect/reselect them.\nStep 7: With the sketch of the plate selected still, click the \u0026ldquo;Extrude\u0026rdquo; button. This will bring up the extrude dialog. You can rotate the 3d model to get a better view of the Distance Arrow. As you drag it up and down, you can see the plate get thicker and thinner. You can also type in a value in the box. I used 0.25 inches since this is a fairly thick size that works for even the weakest of materials. You also need to check the Operation section carefully. There are 5 options all with different purposes.\nNew Body - This will create a new part in your design. This is useful if you want to make a new part from a sketch. You can also use this to make a new part from a 3D model. This is what we want to do here. New Component - This will create a new part in your design. This is useful if you want to make a new part from a sketch. You can also use this to make a new part from a 3D model. This is not what we want to do here. Cut - This will cut out the shape of the sketch from the part. This is useful if you want to make a hole in a part. This is not what we want to do here. Cut - This will cut out the shape of the sketch from the part. This is useful if you want to make a hole in a part. This is not what we want to do here. Join - This will add the shape of the sketch to the existing part part. This is not what we want to do here. Step 8: Click the \u0026ldquo;OK\u0026rdquo; button to finish the extrusion. This will create a new part in your design. You can see the new part in the tree on the left side of the screen. You can also see the new part in the 3D view. The part will be under Bodies and given a default name. You can rename it by double clicking on it in the tree or right clicking on it and selecting \u0026ldquo;Rename\u0026rdquo;. You can also convert it to a component by right clicking on it and selecting \u0026ldquo;Create Component from Bodies\u0026rdquo;. Finally if you did turn it into a component you could now export it, send a copy to a team mate or even convert the body inside of our component into a STL to be 3d printed.\n// TODO: Add a step for adding a hole for the battery positive lines.\n!!!YOU JUST MADE YOUR FIRST PART IN FUSION 360!!!\n"
},
{
	"uri": "https://frczero.org/about/",
	"title": "0.0 About FRC0",
	"tags": [],
	"description": "",
	"content": "0.0 About FRC0? FRC0 is a knowledge base for students, mentors, and parents of FIRST Robotics Competition teams. It is a single source of information for all things FIRST Robotics Competition. This includes information on the game, the rules, the robot, and the competition and much more. The site is broken down into chapters and sections. Each chapter is a topic and each section is a sub-topic. The chapters and sections are listed in the left sidebar. Teams can use FRC0 to help them prepare for the season, build their robot, and compete in the competition. Teams can submit content to FRC0 to help other teams. FRC0 is the collaborative effort of many teams and individuals.\nBelow is an outline of the topics that will be covered in this chapter.\nContents for this Chapter Order Page Title Time Estimate 0.1 Why FRC0? 5 minutes 0.2 How to Use FRC0 5 minutes 0.3 How to write for FRC0 5 minutes 0.4 Who are the contributors? 5 minutes 0.5 Special Thanks and References 5 minutes Total 25 minutes "
},
{
	"uri": "https://frczero.org/about/why-frc0/",
	"title": "0.1 Why FRC0?",
	"tags": [],
	"description": "",
	"content": "FRC0 was created to help address the following issues:\nThere is a lot of information about FIRST Robotics Competition, but it is spread out across many different websites and sources. There are not as many Mentors and Coaches as there are students. Guides like WPIlib, Rev, CTRE, and others are great, but they are not always easy to understand or they don\u0026rsquo;t cover all the topics. For example, the WPIlib guides do not cover the game or the competition. The CTRE guides are specific to the CTRE motor controllers and hardware. The Rev guides are specific to the Rev motor controllers and hardware. There is no comprehensive guide to FRC as a whole. Now there is. Rookie teams need an easy to follow guide to help them get started. Why do many of the pages look like powerpoint slides (On Desktop)? This website was built using the learn theme for Hugo. The learn theme is designed to look like powerpoint slides. This makes it easy to read and understand. The theme is also responsive, so it looks good on mobile devices. With this theme, we can focus on the content and not the design. Since the focus is on knowledge and information, the design is secondary. The biggest benefit of using Hugo and other SSG (static site generators) is new \u0026ldquo;posts\u0026rdquo; can be added to the site without having to rebuild the entire site. This makes it easy to add new content and keep the site up to date. If you are interested in learning about writing content for this site, please see the Writing Content page.\n"
},
{
	"uri": "https://frczero.org/about/how-to-use-frc0/",
	"title": "0.2 How to Use FRC0",
	"tags": [],
	"description": "",
	"content": "FRC0 is based on the learn theme for Hugo. The learn theme is explained in detail on the Hugo Learn Theme website. What is useful about this theme is it uses a system of Chapters and Sections. Each Chapter is a topic and each Section is a sub-topic. The Chapters and Sections are listed in the left sidebar. The Chapters and Sections are also used to create the Table of Contents for each Chapter page. Below is a table of all of the chapters as of 2/5/2023:\nOrder Chapter Title 0.0 About FRC0 1.0 Competition 2.0 Engineering Design 3.0 Machining \u0026amp; Fabrication 4.0 Electronics 5.0 Pneumatics 6.0 Programming 7.0 Computer Aid Design 8.0 Business \u0026amp; Marketing 9.0 Outreach \u0026amp; Education Contents are divided into numbered sections to help with the ordering of the menu. There is also a weight property that can be added to the front matter of each page to help with ordering. As a reminder the front matter is the section of the page that starts with --- and ends with ---. The front matter is used to set the page title, date, and other properties. The front matter is explained in detail on the Hugo Front Matter page.\nAnother awesome benefit of the learn theme is the FREE search tool! Its located at the top of the left sidebar. Any topics, keywords, etc. can be searched for. If you are unsure where to find a piece of information, try searching for it.\nDisclaimers and Other Legal Profunctory Stuff FRCzero.org is not an official source of information for FIRST Robotics Competition. It is a knowledge base for students, mentors, and parents of FIRST Robotics Competition teams. It is written by those same students, mentors, and parents. Humans, if you may not know, are rarely perfect and have been known to make occasional mistakes. A famous human inventor once said, \u0026ldquo;I have not failed. I\u0026rsquo;ve just found 10,000 ways that won\u0026rsquo;t work.\u0026rdquo; So, if you find a mistake, please let us know. We will do our best to fix it. You can submit issues to the github repository and you can submit a pull request to fix the issue. If you find the idea of github confusing, you should ask a mentor or FRC community member for help. A very good beginners guide to using git and github can be found at https://guides.github.com/activities/hello-world/.\nFRCzero.org is a non-official, non-licensed, uninsured, community of it\u0026rsquo;s users. It is up to you as a user to use your best judgement when submitting new documentation or following existing documentation. No one is responsible for any damages or injuries that may occur from the use of this site except YOU! If you are unsure about something, please ask a mentor or FRC community member for help. Thats what they are there for.\n"
},
{
	"uri": "https://frczero.org/about/writing-content/",
	"title": "0.3 Writing Content for the Website",
	"tags": [],
	"description": "",
	"content": "So you want to write content for the FRC0 website? Great! This page will help you get started.\nWhat is Markdown? Markdown is a lightweight markup language with plain text formatting syntax. It is designed so that it can be converted to HTML. It is often used to format readme files, for writing messages in online discussion forums, and to create rich text using a plain text editor. For more information, please see the Markdown Guide.\nWhat is Hugo? Hugo is a static site generator written in Go. It is optimized for speed, ease of use, and configurability. Hugo takes a directory with content and templates and renders them into a full HTML website. For more information, please see the Hugo Documentation.\nWhat does a page of markdown look like for FRC0? --- title: \u0026#34;1.1 Why FRC0?\u0026#34; date: 2023-02-04T22:22:45-05:00 --- FRC0 was created to help address the following issues: - There is a lot of information about FIRST Robotics Competition, but it is spread out across many different websites and sources. - There are not as many Mentors and Coaches as there are students. - Guides like WPIlib, Rev, CTRE, and others are great, but they are not always easy to understand or they don\u0026#39;t cover all the topics. - For example, the WPIlib guides do not cover the game or the competition. - The CTRE guides are specific to the CTRE motor controllers and hardware. - The Rev guides are specific to the Rev motor controllers and hardware. - There is no comprehensive guide to FRC as a whole. Now there is. - Rookie teams need an easy to follow guide to help them get started. ## Why do many of the pages look like powerpoint slides (On Desktop)? This website was built using the learn theme for Hugo. The learn theme is designed to look like powerpoint slides. This makes it easy to read and understand. The theme is also responsive, so it looks good on mobile devices. With this theme, we can focus on the content and not the design. Since the focus is on knowledge and information, the design is secondary. The biggest benefit of using Hugo and other SSG (static site generators) is new \u0026#34;posts\u0026#34; can be added to the site without having to rebuild the entire site. This makes it easy to add new content and keep the site up to date. If you are interested in learning about writing content for this site, please see the [Writing Content](/about/writing-content/) page. How do I write a page of markdown for FRC0? Its pretty simple. The first section is called the \u0026ldquo;Front Matter\u0026rdquo;. It is used to define the title and date of the page. The rest of the page is the content. The content is written in markdown. Try to keep the content to 1-2 paragraphs per section. This makes it easier to read and understand. I would also recommend using a plain text editor like Notepad++ or Visual Studio Code. These editors have plugins that make it easy to write markdown. Once you have new content ready to go, you can submit a pull request to our github with your new markdown content. We will review the content and add it to the site accordingly.\nHow do I add credit to a page? There is a method of marking the files beginning with something called front matter. Below is their method of marking it, however this won\u0026rsquo;t show up on the page in a visible way and it\u0026rsquo;s removed from the public HTML. I like being able to credit the individual authors who made the files so for now feel free to add a \u0026ldquo;By So and So - Created on 01-01-1984\u0026rdquo; under the title of the page. We will eventually have this auto generated based on the front matter data!\n---\rdate: \u0026#39;2012-04-06\u0026#39; (you can use full or shortened time stamps)\rtitle: \u0026#39;Page title\u0026#39;\rweight: 6.0 (the weight is used to sort it on the menu so if it\u0026#39;s in programming it\u0026#39;ll be 6.something)\rlastmod: \u0026#39;2012-04-06\u0026#39; (you can use full or shortened time stamps, this is only added if someone edits the original after it\u0026#39;s published)\rauthor: \u0026#39;your name\u0026#39;\reditors: \u0026#39;person1, person2, so on\u0026#39;\r--- If you\u0026rsquo;re adding a whole new chapter it\u0026rsquo;s gonna have different front matter. The only real difference is the chapter variable is set to true. The rest of the variables are the same. If you are an eagle eyed observer you\u0026rsquo;re also seeing that the example below uses = and +++ instead of : and \u0026mdash; like the first example. Either works, but they are exclusive to the page you are on. You CANNOT mix : with +++ or \u0026mdash; with =. Thats just how it is!\n+++\rtitle = \u0026#34;0.0 About FRC0\u0026#34;\rdate = 2023-02-04T22:22:45-05:00\rweight = 0.0\rchapter = true\rlastmod = 2023-02-04T22:22:45-05:00\rauthor = \u0026#39;Mr. Siefen\u0026#39;\reditors = \u0026#39;\u0026#39;\r+++ "
},
{
	"uri": "https://frczero.org/about/contributors/",
	"title": "0.4 Who are the contributors?",
	"tags": [],
	"description": "",
	"content": "This site is a collaborative effort of many teams, individuals and private companies. The following teams and individuals have contributed to this site:\nFRC 453 Rock\u0026rsquo;em Sock\u0026rsquo;em Robotics FRC 2129 Ultraviolet FTC 12600 Robotters Mansour Quddus Hosting Maintenance and the Domain Name are provided by Mr. Siefen\u0026rsquo;s Robot Emporium and ResGreen Group where he works when not doing all that other stuff.\n"
},
{
	"uri": "https://frczero.org/about/thanks/",
	"title": "0.5 Special Thanks and References",
	"tags": [],
	"description": "",
	"content": "This site would not be possible without the following:\nHugo - A static site generator written in Go. Hugo Learn Theme - A theme for Hugo that is designed to look like powerpoint slides. Hugo Learn Theme Docs - The documentation for the Hugo Learn Theme. Mr. Siefen\u0026rsquo;s Robot Emporium - A personal blog by Mr. Siefen. It has alot of non-FRC content, but it is focused on robotics, stem, iot, and other not as relevent topics. docs.wpilib.org - The documentation for WPIlib. This should be considered the standard and Official \u0026ldquo;gold source\u0026rdquo; of information for FRC. It is the most complete and up to date source of information for FRC for many topics. Where possible, this site will link to the WPIlib documentation. REV Robotics - A company that makes motor controllers and other hardware for FRC. CTRE Phoenix - A company that makes motor controllers and other hardware for FRC. AndyMark - A company that makes parts for FRC. They also supply field game pieces. The standard K.O.P. (Kit of Parts) chassis is made by AndyMark. It is tried, tested, and proven to work. FIRST Robotics Competition - The official website for FIRST Robotics Competition. The Blue Alliance - A website that tracks FRC teams, events, and matches. The metrics and data on this site are used to help teams improve, learn about teams near them, and to help teams find other teams to compete with during offseason events. The Blue Alliance is another community effort. It is a great resource for teams and mentors. gm0.org - A website that teaches FTC teams how to do\u0026hellip; well just about everything related to FTC. It is a great resource for FTC teams and mentors. It was the original inspiration for this site and our benchmark to match for quality and content. Seriously, go check it out. It is a great resource. Many of the lessons can apply to FRC teams as well. What are you waiting for? Go check it out! Seriously. DO IT NOW! "
},
{
	"uri": "https://frczero.org/",
	"title": "FRC0 - HOME",
	"tags": [],
	"description": "",
	"content": "Welcome to FRC0 (FRC Zero) ⚠ Emergency Notice to FRC Turkey Teams: Due to the recent Earthquakes some events Izmir \u0026amp; Mersin have been CANCELED . Please check the FIRST Turkey Website Announcement for more information.\nSame message hopefully in decent Turkish: Son depremler nedeniyle bazı olaylar İzmir \u0026amp; Mersin İPTAL EDİLDİ . Daha fazla bilgi için lütfen FIRST Turkey Web Sitesi Duyurusunu inceleyin.\nWhat\u0026rsquo;s FRC0 and How Can I Learn More About It? FRC0 is a knowledge base for students, mentors, and parents of FIRST Robotics Competition teams. The goal of FRC0 is to provide a single source of information for all things FIRST Robotics Competition. This includes information on the game, the rules, the robot, and the competition and even important notices (See above).\nFRC0 is a work in progress. We are always looking for new contributors to help us improve the site. If you are interested in contributing, please see the writing-content page. You can also join our FRC0 Discord server to chat with other FRC0 contributors and readers. Finally, if you find issues with the site, please open an issue on our GitHub repository.\nCool Video of the Github Commit History (Updated Weekly) https://youtu.be/JGDiu-InnGU\nImportant Links: FRC0 on GitHub GM0 Website Docs.wpilib.org REV Robotics CTRE Phoenix Chief Delphi FIRST Robotics Competition FRC Reddit FRC Discord FRC YouTube FRC Twitch F.U.N. (First Update Now) RoboZone FindRobotParts "
},
{
	"uri": "https://frczero.org/programming/cpp/syntax/",
	"title": "6.3.1 Syntax",
	"tags": [],
	"description": "",
	"content": "What is syntax in the context of programming? Syntax is the set of rules that defines what combinations of high-level language elements (semi-human english/insert your language) can be written in. It also sets rules about whitespace, comments, and other details of the code. Syntax is also refering to how the code can be laid out. For C++ thankfully the whitespace is not important, but it is important to know how to use it to make your code more readable. Below is a code block that shows the syntax of C++.\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { cout \u0026lt;\u0026lt; \u0026#34;Hello FRC0! This is a program written in C++ to teach you about syntax.\u0026#34; \u0026lt;\u0026lt; endl; return 0; } What are some of the syntax rules for C++? The first line of code must be the include statements. Includes are used to include other files into your code. In this case we are including the iostream file which is used for input and output. This is a standard library that is included with C++ and used quite often. The second line is the using namespace std; statement. This is used to tell the compiler that we are using the standard namespace. This is not required, but it is used often to make the code more readable. The namespace line here turns the cout and endl statements into just cout and endl. Without it we would have to use std::cout and std::endl. Why type more than you have to every time you use it? The third line is the main function. This is the entry point for the program. It is the first function that is called when the program is run. It is required for all C++ programs. The reason there is a data type of int is because the main function must return an integer. Dont worry about return statements for now, we will cover them later. The fourth line is the cout statement. This is used to output text to the console. The \u0026laquo; is the insertion operator. It is used to insert the text into the cout statement. The endl is used to end the line. Without it the next cout statement would be on the same line as the previous one. For people who come from Arduino or other C based languages, this is similar to the Serial.print() statement vs Serial.println() statement based on if you include the endl or not. We opted to not use the standard \u0026ldquo;Hello World\u0026rdquo; text but still wanted to use the cout statement. We also wanted to use the endl statement to show how it is used. The fifth line is the return statement. This is used to return a value from the function. In this case we are returning 0. below is a short table showing common return codes and their meanings (This is super technical stuff and not important besides returning 0 ends the program) 0 - No errors 1 - General error 2 - Misuse of shell builtins 126 - Command invoked cannot execute 127 - \u0026ldquo;command not found\u0026rdquo; 128 - Invalid argument to exit 128+n - Fatal error signal \u0026ldquo;n\u0026rdquo; 130 - Script terminated by Control-C 255* - Exit status out of range What is a comment? A comment is a line of code that is not executed when the code is run. It can and should be used to leave notes, reminders, or other information for yourself and others. There are two types of comments in C++.\nSingle line comments - These are comments that are on a single line. They start with // and end at the end of the line. They can be used to comment out a single line of code. They are used for short headers and comments. Multi-line comments - These are comments that are on multiple lines. They start with /* and end with */. They can be used to comment out multiple lines of code. They are used for longer comments and even documentation. // This is a single line comment /* This is a multi-line comment This is a multi-line comment This is a multi-line comment This is a multi-line comment */ What is a variable and what are its rules? A variable is a named location in memory that is used to store data. The data can be changed during the execution of the program. The rules for variables are as follows:\nA variable must be declared before it is used. A variable must be given a type. A variable must be given a unique name. If a variable is not initialized it will be given a default value of Null. A variable can be initialized when it is declared. int myVariable; // This is a variable declaration int myVariable = 0; // This is a variable declaration and initialization The following are now considered more of suggestions for readability and not rules that will prevent the code from compiling.\nVariable names should be descriptive. Variable names should be camelCase. Variable names should not start with a number. Variable names should not contain spaces. Variable names should not contain special characters. Variable names should not be a reserved word. What is a reserved word? A reserved word is a word that is already used by the compiler. It is used to define the syntax of the language. It cannot be used as a variable name. The following is a list of reserved words in C++.\nalignas alignof and and_eq asm auto bitand bitor bool break case catch char char16_t char32_t class compl const constexpr const_cast continue decltype default delete do double dynamic_cast else enum explicit export extern false float for friend goto if inline int long mutable namespace new noexcept not not_eq nullptr operator or or_eq private protected public register reinterpret_cast return short signed sizeof static static_assert static_cast struct switch template this thread_local throw true try typedef typeid typename union unsigned using virtual void volatile wchar_t while xor xor_eq What is a data type? A data type is a set of values and operations that can be performed on those values. The following are the most common data types used in C++.\nint - This is the most common data type used. It is used to store integers (positive whole numbers). This is the default data type for integers. double - This is used to store decimal numbers up to 15 decimal places. bool - This is used to store true or false values. char - This is used to store single characters. string - This is used to store multiple characters. float - This is used to store decimal numbers up to 7 decimal places. long - This is used to store integers between -2,147,483,648 and 2,147,483,647. short - This is used to store integers between -32,768 and 32,767. byte - This is used to store integers between 0 and 255. What is the difference between an int and a double? An int is used to store whole numbers. A double is used to store decimals. Below is a code block that shows how to use an int and a double.\nint myInt = 0; double myDouble = 0.0; What is the difference between an string and a char? A string is used to store multiple characters. A char is used to store a single character. Below is a code block that shows how to use a string and a char.\nstring myString = \u0026#34;Hello World\u0026#34;; char myChar = \u0026#39;H\u0026#39;; What is a constant? A constant is a variable that cannot be changed. The rules for constants are as follows:\nA constant must be declared before it is used. A constant must be given a type. A constant must be given a unique name. A constant must be initialized when it is declared. A constant can be declared using the const keyword. A constant can be declared using the #define preprocessor directive. const int myConstant = 0; // This is a constant declaration and initialization using the const keyword #define myConstant 0 // This is a constant declaration and initialization using the #define preprocessor directive What is an operator? An operator is a symbol that tells the compiler to perform a specific mathematical or logical manipulation. The following are the most common operators used in C++.\nThis is the addition operator. It adds two values. This is the subtraction operator. It subtracts two values. This is the multiplication operator. It multiplies two values. / - This is the division operator. It divides two values. % - This is the modulus operator. It returns the remainder of the division of two values. = - This is the assignment operator. It assigns a value to a variable. == - This is the equality operator. It checks if two values are equal. != - This is the inequality operator. It checks if two values are not equal. \u0026gt; - This is the greater than operator. It checks if one value is greater than the other. \u0026lt; - This is the less than operator. It checks if one value is less than the other. \u0026gt;= - This is the greater than or equal to operator. It checks if one value is greater than or equal to the other. \u0026lt;= - This is the less than or equal to operator. It checks if one value is less than or equal to the other. \u0026amp;\u0026amp; - This is the and operator. It checks if both values are true. || - This is the or operator. It checks if either value is true. What is the difference between the = and == operators? The = operator is used to assign a value to a variable. The == operator is used to check if two values are equal.\nint myInt = 0; // This is an assignment if (myInt == 0) // This is a comparison { // Do something } What is an expression? An expression is a combination of variables, constants, operators, and method calls that the compiler will evaluate to produce a single value. The following is an example of an expression.\nint myInt = 0; int myOtherInt = 1; int myExpression = myInt + myOtherInt; What is a statement? A statement is a complete line of code that performs a specific task. The following is an example of a statement.\nint myInt = 0; What is a method? A method is a block of code that performs a specific task. The following is an example of a method.\nvoid MyMethod() { // Do something } These can also be called functions.\nWhat is a class? A class is a blueprint for creating objects. The following is an example of a class.\nclass MyClass { // Do something here with a method int myInt; int MyMethod() { return myInt + 10; } // Do something here with a constructor MyClass() { myInt = 10; } // Do something here with a destructor ~MyClass() { // Do something here } }; What is a constructor? A constructor is a method that is called when an object is created. The following is an example of a constructor.\nclass MyClass { int myInt; MyClass() { myInt = 10; } }; What is a destructor? A destructor is a method that is called when an object is destroyed. The following is an example of a destructor.\nclass MyClass { int myInt; ~MyClass() { // Do something here } }; -\u0026gt; Back to 6.3 Programming/cpp\n"
},
{
	"uri": "https://frczero.org/programming/cpp/structure/",
	"title": "6.3.2 Structure",
	"tags": [],
	"description": "",
	"content": "What is Structure? Structure is the way that C++ is organized. There are many schools of thought and not really one exact way to do it. The way that we will be doing it is the way that is most common in FRC and is the way that most teams will be able to help you with. It is also the way that we will be using in the examples and lessons for consistency. The only language lesson where whitespace is important is in Python. There the structure and whitespace are very important. In C++ the whitespace is not as important but it is still important to have a consistent structure.\nWhat is a Program? Starting from the old days of punch cards, a program is a set of instructions that are executed by a computer. The instructions are written in a language that the computer can understand. The computer then executes the instructions in order. The instructions are written in a file that is saved on the computer. We as programmers can make our own lives easier by sticking to a standard structure for our programs. This way we can easily find the code that we need to change and we can easily find the code that we need to debug. This is the same for any programming language. The structure of the program is similar for most programming languages. The syntax of the language is what is different.\nIs it always the same order? Without getting into too much detail, the order of the instructions is not always the same. The order of the instructions is determined by the control structures. We will cover control structures in another lesson. The order of the instructions is important because the computer executes the instructions in a logical order. If the order is wrong, the program will not work correctly. This is why it is important to have a standard structure for your programs and to stick to that structure. There was an old common expression called \u0026ldquo;GOTO 10\u0026rdquo; which was used to jump to a specific line in a program. This was used to make the program jump to line 10 (the beginning) and essentially start back at the beginning in a loop. Even at this primitive stage there was a top down order lines were executed in.\nWhat is the structure of a typical C++ program? The structure of a typical C++ program is as follows:\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { // Code goes here return 0; } What is the structure of a typical FRC C++ program? The structure of a typical FRC C++ program is as follows: //TODO: THIS IS NOT THE CORRECT STRUCTURE WITH FRC LIBRARIES, IT IS JUST A PLACEHOLDER\n#include \u0026lt;frc/TimedRobot.h\u0026gt; #include \u0026lt;frc/smartdashboard/SmartDashboard.h\u0026gt; class Robot : public frc::TimedRobot { public: void RobotInit() override; void RobotPeriodic() override; void AutonomousInit() override; void AutonomousPeriodic() override; void TeleopInit() override; void TeleopPeriodic() override; void TestPeriodic() override; }; void Robot::RobotInit() { // Code goes here and is run when the robot is first turned on } void Robot::RobotPeriodic() { // Code goes here and is run every 20ms } void Robot::AutonomousInit() { // Code goes here and is run when the robot enters autonomous mode } void Robot::AutonomousPeriodic() { // Code goes here and is run every 20ms while the robot is in autonomous mode } void Robot::TeleopInit() { // Code goes here and is run when the robot enters teleop mode } void Robot::TeleopPeriodic() { // Code goes here and is run every 20ms while the robot is in teleop mode } void Robot::TestPeriodic() { // Code goes here and is run every 20ms while the robot is in test mode } Why is the FRC structure so different? It\u0026rsquo;s not really different, but actually very similar. The only difference is that the FRC structure uses lots of extra libraries that handle many things for teams. The FRC structure also has a few extra functions that are called at specific timed intervals. The FRC structure is also a class structure which is a little more advanced than the typical C++ structure for something like a \u0026ldquo;hello world\u0026rdquo; example. We will cover classes in another lesson.\nWill the FRC structure be similar for other languages and do regular C++ programs work in the FRC structure? The FRC TimedRobot structure is very similar across the OOP languages (C++ and Java). Even with CommandBased robots the idea and concepts of subsystems, commands, and a sequential/concurrent scheduler are the same. The FRC structure is still just regular c++ with lots of extra add ons. Anything you can do in regular C++ you can do in the FRC structure. The FRC structure is just a way to make your life easier and to make your code more organized.\nWhat are the rules and guidelines for the structure of a C++ program? All of the includes must be at the top of the program. All of the using statements must be at the top of the program. All programs will have a main function. Even the FRC programs have a main function, its just not the main place code is written. When defining a function, the function name should start with a lowercase letter and be snake/camel case. Example: void my_function() or void myFunction() This is a suggestion and not a rule. You can name your functions however you want. Functions will contain all code that is encapsulated between the curly braces. Therefore its good practice to have the opening curly brace on the same line as the function name and the closing curly brace on its own line. Example below is not good practice for readability, even though it is valid C++: void my_function() { // Code goes here }\nExample below is good practice for readability:\nvoid my_function() { // Code goes here } -\u0026gt; Back to 6.3 Programming/cpp\n"
},
{
	"uri": "https://frczero.org/programming/cpp/datattypes/",
	"title": "6.3.3 Data Types",
	"tags": [],
	"description": "",
	"content": "What are Data Types? Data types are a way to classify data. They are used to tell the compiler what kind of data is being used so that it can perform operations on the data correctly. For example, if you want to add two numbers, the compiler needs to know that the data is a number and also the type of number data it is. Besides numbers, there are data types for characters, strings, booleans, and more. All of them will be outlined in this section. Data types across many programming languages are similar, but there are some differences from language to language so don\u0026rsquo;t be surprised if you see something different in another language.\nHow can we classify data types? There are two main types of data types: primitive and non-primitive. Primitive data types are the most basic data types and are built into the language. Non-primitive data types are more complex and are built using the primitive data types. For example, a string is a non-primitive data type and is built using the character data type. The primitive data types are:\nBoolean Character Integer Floating Point Valueless (void) Wide Character The non-primitive data types are:\nArray (String is an Array of Characters) Class Enumeration Function Pointer Reference Structures Union Typedef What is a Boolean? A boolean is a data type that can only be true or false. It is used to represent a logical value and is used in control structures. It is also used to represent a bit in memory. The boolean data type is represented by the keyword bool. The boolean data type is the smallest data type and is only one bit in size. It is also the fastest data type to process. The boolean data type is used in many places in C++ and is very important to understand. For FRC usage, booleans are commonly used for button feedback, limit switches, and as return values for functions.\nAn example of a boolean in the context of an FRC style snippet is below:\nbool isButtonPressed = false; What is a Character? A character is a data type that is used to represent a single character. It is used to represent a single letter, number, or symbol. The character data type is represented by the keyword char. The character data type is one byte in size and is the smallest data type that can represent a single character. The character data type is used in many places in C++ and is very important to understand. For FRC usage, characters are commonly used for processing strings, handling autonomous side selection (l,c,r) and for many other features. Characters are tied by their byte number to the ASCII table. The ASCII table is a table that contains all of the characters that can be represented by a character data type.\nBelow is an ascii table that shows the characters that can be represented by a character data type. The table is from ASCII Table.\nAn example of a character in the context of an FRC style snippet is below:\nchar autonSelect = \u0026#39;l\u0026#39;; What is an integer? An integer is a data type that is used to represent a whole number. While there is a datatype called int, integers right now, in this section is referring to the whole number data type. There are many different sized whole number data types that programmers can use to save memory and to represent different ranges of numbers. The integer data types are represented by the keywords int, short, long, and long long. The integer data types are used in many places in C++ and are very important to understand. For FRC usage, integers are commonly used for counting, indexing, and for many other features.\nEach of the integer data types have different sizes and ranges. The sizes and ranges are shown in the table below. The table is from C++ Data Types.\nData Type Size Range short 2 bytes -32,768 to 32,767 int 4 bytes -2,147,483,648 to 2,147,483,647 long 4 bytes -2,147,483,648 to 2,147,483,647 long long 8 bytes -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 An example of an integer in the context of an FRC style snippet is below:\nint encoderCount = 0; short encoderCount = 0; long encoderCount = 0; long long encoderCount = 0; What is a floating point? A floating point is a data type that is used to represent a decimal number. There are two different floating point data types that programmers can use to save memory and to represent different ranges of numbers. The floating point data types are represented by the keywords float and double. The floating point data types are used in many places in C++ and are very important to understand. For FRC usage, floating points are commonly used for representing speeds, distances, and for many other features.\nEach of the floating point data types have different sizes and ranges. The sizes and ranges are shown in the table below. The table is from C++ Data Types.\nData Type Size Range float 4 bytes 1.2E-38 to 3.4E+38 double 8 bytes 2.3E-308 to 1.7E+308 An example of a floating point in the context of an FRC style snippet is below:\nfloat wheelRadius = 2.523; double wheelRadius = 2.523; What is a Valueless (void)? A valueless data type is a data type that is used to represent nothing. It is used to represent a value that is not set. The valueless data type is represented by the keyword void. The valueless data type is used commonly as a function return type.\nAn example of a valueless data type in the context of an FRC style snippet is below:\nvoid autonomous() { // Code here } What is a Wide Character? A wide character is a data type that is used to represent a single character. The wide character data type is represented by the keyword wchar_t. The wide character data type is two or four bytes and is used to represent characters that are not in the ASCII table, but instead im the much larger Unicode table. While not commonly used in FRC, it is important to understand.\nA copy of the Unicode table is shown below. The table is from Unicode Table.\nAn example of a wide character in the context of an FRC style snippet is below:\n// Wide character for the letter c wchar_t wideChar = L\u0026#39;c\u0026#39;; What is an Array? An array is a data type that is used to represent a list of data. The array data type is represented by the keyword array. The array data type can be a list of any data type. The array data type is used commonly to represent strings, lists of numbers or even lists of arrays (2d/multidimensional arrays). Arrays are very important to understand and are used in many places in C++, especially in FRC.\nAn example of an array in the context of an FRC style snippet is below:\n// Array of 5 integers storing motor controller IDs int motorControllerIDs[5] = {1, 2, 3, 4, 5}; // Setting the values of all of the elements in the array to 0 motorControllerIDs[0] = 0; motorControllerIDs[1] = 0; motorControllerIDs[2] = 0; motorControllerIDs[3] = 0; motorControllerIDs[4] = 0; // The more efficient way to do the same thing, but using a for loop for (int i = 0; i \u0026lt; 5; i++) { motorControllerIDs[i] = 0; } What is a Pointer? A pointer is a data type that is used to represent a memory address. The pointer data type is represented by the keyword pointer. The pointer data type is used commonly to represent a memory address. Pointers are a fundamental part of how all computers work and are very important to understand. While not commonly used in FRC, it is important to understand.\nAn example of a pointer in the context of an FRC style snippet is below:\n// Pointer to an integer int* intPointer = nullptr; // Pointer to a double double* doublePointer = nullptr; // Pointer to a character char* charPointer = nullptr; What is a class? A class is a data type that is used to represent a custom data type. The class data type is represented by the keyword class. The class data type is used commonly to represent a custom data type created by the programmer or a library. Classes can contain many different data types and functions inside of them. One really common class that I recommend all teams used is a Constants class. This class is used to store all of the constants that are used in the code. This is a really good way to keep track of all of the constants and to make sure that they are all in one place. Classes are very important to understand and are used in many places in C++, especially in FRC.\nAn example of a Constants class in the context of an FRC style snippet is below:\n// The constants class used to store driver station constants, motor ids, etc. class Constants { public: // Driver station constants static const int DRIVER_STATION_ID = 0; static const int DRIVER_STATION_PORT = 0; // Motor controller constants static const int MOTOR_CONTROLLER_ID = 0; static const int MOTOR_CONTROLLER_PORT = 0; }; How can I learn more in depth about data types for C++? If you want to learn more in depth about data types for C++, I recommend checking out the following resources:\nC++ Data Types C++ Data Types C++ Data Types -\u0026gt; Back to 6.3 Programming/cpp\n"
},
{
	"uri": "https://frczero.org/programming/cpp/inputoutput/",
	"title": "6.3.4 Input and Output",
	"tags": [],
	"description": "",
	"content": "What is Input and Output? In many scenarios you will want to get input from the user or output information to the user. In C++ there are a few different ways to do this. The most common way is to use the std::cin and std::cout objects. These objects are part of the standard library and are really convenient to use. While there are other ways to do this for FRC, when you are beginning to learn C++ it is best to use these objects. These objects will work with a standard console window.\nHow to use Input and Output To use the std::cin and std::cout objects you will need to include the iostream header file. This header file is part of the standard library and is included with the C++ compiler. To use the cin and cout objects without the need to use the std:: namespace you can use the using namespace std; statement. This can however cause conflicts with other libraries that you may be using. It is best to use the std:: namespace when you are beginning to learn C++ and not use the using namespace std; statement.\nHow to use std::cout To use the std::cout object you will need to use the \u0026lt;\u0026lt; operator. This operator is called the insertion operator. The \u0026lt;\u0026lt; operator is used to insert data into the std::cout object. The std::cout object is used to output data to the console window. The std::cout object is used in the following way:\nstd::cout \u0026lt;\u0026lt; \u0026#34;Hello World!\u0026#34;; There is also a handy std::endl object that can be used to output a new line to the console window. This is useful when you want to output multiple lines of text to the console window. The std::endl object is used in the following way:\nstd::cout \u0026lt;\u0026lt; \u0026#34;Hello World!\u0026#34; \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;This is a new line!\u0026#34; \u0026lt;\u0026lt; std::endl; How to use std::cin To use the std::cin object you will need to use the \u0026gt;\u0026gt; operator. This operator is called the extraction operator. The \u0026gt;\u0026gt; operator is used to extract data from the std::cin object. The std::cin object is used to get input from the user. The std::cin object is used in the following way:\nstd::cin \u0026gt;\u0026gt; input; The input variable can be any type of variable that you would like to get input from the user. The std::cin object will get input from the user and store it in the input variable. The std::cin object will only get input from the user until the user hits the enter key. When the user hits the enter key the std::cin object will store the input in the input variable and then the program will continue to execute.\nHow to use Input and Output in FRC When you are using C++ for FRC you will need to use the frc::SmartDashboard class to output information to the SmartDashboard. The frc::SmartDashboard class is part of the WPILib library and is used to output information to the SmartDashboard. The frc::SmartDashboard class is used in the following way:\nfrc::SmartDashboard::PutNumber(\u0026#34;MyNumber\u0026#34;, 1); The frc::SmartDashboard::PutNumber method is used to output a number to the SmartDashboard. The frc::SmartDashboard::PutNumber method takes two arguments. The first argument is a string that represents the name of the number. The second argument is a number that represents the value of the number. The frc::SmartDashboard::PutNumber method will output the number to the SmartDashboard with the name specified in the first argument.\nThe frc::SmartDashboard class also has a GetNumber method that can be used to get a number from the SmartDashboard. The frc::SmartDashboard::GetNumber method takes one argument. The first argument is a string that represents the name of the number. The frc::SmartDashboard::GetNumber method will get the number from the SmartDashboard with the name specified in the first argument and return it to the program.\nWhat are the other ways to display data besides the SmartDashboard? In FRC we have the default driver station, SmartDashboard, Shuffleboard and now also Glass. Each of these tools vary in their design, features and more, but all have the same core function. Anytime you are displaying data to the driver station you are using one of these tools. Below is a table that shows the differences between each of these tools and a link to each of their documentation pages.\nTool Description Documentation Driver Station The LabVIEW Dashboard is automatically launched by the FRC Driver Station by default. The purpose of the Dashboard is to provide feedback about the operation of the robot using tabbed display with a variety of built in features. Driver Station Documentation SmartDashboard SmartDashboard allows you to view your robot data by automatically creating customizable indicators specifically for each piece of data sent from your robot. SmartDashboard Documentation Shuffleboard Shuffleboard has the same features as SmartDashboard. It also improves on the setup and visualization of your data with new features and a modern design at the cost of being less resource efficient. Shuffleboard Documentation Glass Glass is a Dashboard focused on being a programmer’s tool for debugging. The primary advantages are the field view, pose visualization and advanced signal plotting tools. Glass Documentation Where can I learn more? If you would like to learn more about the std::cin and std::cout objects you can check out the following resources:\nC++ Input and Output C++ Input and Output C++ Input and Output If you would like to learn more about the frc::SmartDashboard class and other FRC tools you can check out the following resources:\nFRC Driver Station FRC SmartDashboard FRC Shuffleboard FRC Glass -\u0026gt; Back to 6.3 Programming/cpp\n"
},
{
	"uri": "https://frczero.org/programming/cpp/controlstructures/",
	"title": "6.3.5 Control Structures",
	"tags": [],
	"description": "",
	"content": "What are Control Structures? Control structures are used to control the flow of a program. They allow you to make decisions and repeat code. There are many different types of control structures, but we will focus on the most common ones. If you want to learn more about control structures in general, you can read more about them here. This page will focus on the control structures used in C++ and very very briefly in FRC C++.\nIf Statements These are the most common control structure in programming. They allow you to make decisions based on a condition. If the condition is true, the code inside the if statement will run. If the condition is false, the code inside the if statement will not run. The syntax for an if statement is as follows:\nif (condition) { // Code goes here } In the example the if statement is declared by the keyword if. The condition is in parentheses after the if keyword. The code that will run if the condition is true is in curly braces after the condition. The curly braces are used to group code together. The code inside the curly braces is called the body of the if statement.\nElse Statements If you want to run code if the condition is false, you can use an else statement. The syntax for an else statement is as follows:\nif (condition) { // Code goes here } else { // Code goes here } The else statement is declared by the keyword else. The code that will run if the condition is false is in curly braces after the else statement. The curly braces are used to group code together. If you noticed that the else statement does not have a condition, that is because it is only run if the condition is false. The else statement is only run if everything else is false.\nElse If Statements If you want to run code if the condition is false and you want to run code if another condition is true, you can use an else if statement. The syntax for an else if statement is as follows:\nif (condition) { // Code goes here } else if (condition) { // Code goes here } else { // Code goes here } In this example condition is probably no longer just a boolean value, but could be any logical condition. The else if statement is declared by the keyword else if. The condition is in parentheses after the else if keyword. You can add as many else if statements as you want in between the if and else statements. The else if statement is only checked and run if the previous conditions are false.\nWhat is an If/Else If/Else statement used in FRC? In FRC, the if/else if/else statement is used to check if a button is pressed on the controller. The code for this is as follows:\nif (controller.GetAButton()) { motor.Set(1); } else if (controller.GetBButton()) { motor.Set(-1); } else { motor.Set(0); } Switch Statements Switch statements are similar to if statements, but they are used when you have a lot of conditions. The syntax for a switch statement is as follows:\nswitch (variable) { case value1: // Code goes here break; case value2: // Code goes here break; default: // Code goes here break; } There will always be a default case. The default case is run if none of the other cases are true. The break keyword is used to stop the switch statement from running the rest of the cases. If you do not use the break keyword, the switch statement will run all of the cases after the case that is true. Sometimes this might be what you want the switch to do, but usually its best to break after finding the condition you were after. The switch statement is declared by the keyword switch. The variable is the variable that will be checked against the cases. The cases are declared by the keyword case. The value is the value that the variable will be compared to. Unlike if statements, the code to run for each condition is NOT in curly braces.\nWhat is an example Switch statement used in FRC? In FRC, the switch statement is used to check what mode is selected for autonomous. The code for this is as follows:\nswitch (autonomousMode) { case 0: // Drive forward for 2 seconds m_drive.ArcadeDrive(0.5, 0); Wait(2); break; case 1: // Drive forward for 5 seconds m_drive.ArcadeDrive(0.5, 0); Wait(5); break; case 2: // Drive backwards slowly for 10 seconds m_drive.ArcadeDrive(-0.25, 0); Wait(10); break; default: // Do nothing break; For Loops For loops are used to repeat code a certain number of times. The syntax for a for loop is as follows:\nfor (int i = 0; i \u0026lt; 10; i++) { // Code goes here } The for loop is declared by the keyword for. The first part of the for loop is the initialization. This is where you declare the variable that will be used to keep track of how many times the loop has run. The second part of the for loop is the condition. This is where you declare the condition that will be checked to see if the loop should run again. The third part of the for loop is the increment. This is where you declare how the variable will be changed after each loop. The code that will run each time the loop runs is in curly braces after the for loop.\nWhy use i as a variable and what is the ++ operator? The variable i is used because it is a common variable name to use in for loops. Even though this loop is small, you can nest loops inside of each other. Due to the way code is compiled these small loops still need a proper variable name in their own context. Using lettings like i, j, k, l \u0026hellip; can help programmers understand how far nested they are in their code. Why i? I don\u0026rsquo;t have an answer. The ++ operator is used to increment the variable by 1. The \u0026ndash; operator is used to decrement the variable by 1. The += operator is used to increment the variable by a certain amount. The -= operator is used to decrement the variable by a certain amount.\nHere are some examples of nested for loops, and the various ways to increment the variable i:\nfor (int i = 0; i \u0026lt; 10; i++) { for (int j = 0; j \u0026lt; 10; j++) { for (int k = 0; k \u0026lt; 10; k++) { // Code goes here } } } for (int i = 0; i \u0026lt; 1000; i += 100) { // Code goes here } Here are some examples of nested for loops, and the various ways to decrement the variable i:\nfor (int i = 10; i \u0026gt; 0; i--) { for (int j = 10; j \u0026gt; 0; j--) { for (int k = 10; k \u0026gt; 0; k--) { // Code goes here } } } for (int i = 1000; i \u0026gt; 0; i -= 100) { // Code goes here } What is an example For loop used in FRC? In FRC, the for loop can be used to poll and parse data from all of the analog inputs on the roboRIO and save it to an array. The code for this is as follows:\n// Create an array of AnalogInput objects AnalogInput analog[8]; // Create an array to store the voltage values int analogInputs[8]; // Create the AnalogInput objects and store them in the analog array for (int i = 0; i \u0026lt; 8; i++) { analog[i] = new AnalogInput(i); } // Get the voltage values from the analog inputs and store them in the analogInputs array for (int i = 0; i \u0026lt; 8; i++) { analogInputs[i] = analog[i].getValue(); } While Loops While loops are used to repeat code until a condition is false. The syntax for a while loop is as follows:\nwhile (condition) { // Code goes here } The while loop is declared by the keyword while. The condition is in parentheses after the while keyword. The code that will run each time the loop runs is in curly braces after the while loop. If you want to run code at least once, you can use a do while loop. The syntax for a do while loop is as follows:\ndo { // Code goes here } while (condition); What is an infinite loop? An infinite loop is a loop that will never stop running. This is usually caused by a condition that is always true. Here is an example of an infinite loop:\nwhile (true) { // Code goes here } This has no way of stopping because the condition is always true. This is why you should always make sure that your conditions are correct. If you are not sure if your condition is correct, you can use the debugger to step through your code and see what is happening. To stop the program from running, you can press the stop button in the debugger in VS Code. You can press SHIFT + F5 to stop the program \u0026amp; press F5 to start the debugger again.\nWhat is an example While loop used in FRC? In FRC, the while loop can be used to run code until a limit switch is pressed. The code for this is as follows:\n// Move the arm motor until the limit switch is pressed while (!m_limitSwitch.get()) { // move the motor armMotor.set(0.5); } // Stop the motor armMotor.set(0); Functions Functions are used to group code together. The syntax for a function is as follows:\nreturnType functionName (parameter1, parameter2, ...) { // Code goes here } The function is declared by the keyword function. The return type is the type of data that the function will return. The function name is the name of the function. The parameters are the variables that will be used in the function. The code that will run when the function is called is in curly braces after the function. The return type can be any type of data. The function name can be any name. The parameters can be any type of data. The code that will run when the function is called can be any code. The return type, function name, and parameters are all optional. If you do not want the function to return anything, you can use the keyword void as the return type. If you do not want the function to take any parameters, you can leave the parentheses empty. If you do not want the function to do anything, you can leave the curly braces empty. If you do not want the function to return anything, do not take any parameters, and do not do anything, you can declare the function as follows:\nvoid functionName () { } What is an example function used in FRC? Here is an example function that is used in FRC:\nvoid Drive (double leftSpeed, double rightSpeed) { leftMotor.Set(leftSpeed); rightMotor.Set(rightSpeed); } "
},
{
	"uri": "https://frczero.org/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://frczero.org/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]